# Generated from ./controllers/SCSSParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,333,1056,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,1,0,5,0,152,8,0,10,0,12,0,155,9,0,1,
        0,1,0,1,1,5,1,160,8,1,10,1,12,1,163,9,1,1,1,1,1,5,1,167,8,1,10,1,
        12,1,170,9,1,1,1,1,1,3,1,174,8,1,1,1,1,1,3,1,178,8,1,1,1,3,1,181,
        8,1,1,1,1,1,3,1,185,8,1,5,1,187,8,1,10,1,12,1,190,9,1,1,1,5,1,193,
        8,1,10,1,12,1,196,9,1,1,1,1,1,1,2,5,2,201,8,2,10,2,12,2,204,9,2,
        1,2,1,2,5,2,208,8,2,10,2,12,2,211,9,2,1,2,1,2,3,2,215,8,2,1,2,1,
        2,3,2,219,8,2,1,2,3,2,222,8,2,1,2,1,2,3,2,226,8,2,5,2,228,8,2,10,
        2,12,2,231,9,2,1,2,5,2,234,8,2,10,2,12,2,237,9,2,1,2,1,2,1,3,1,3,
        1,3,4,3,244,8,3,11,3,12,3,245,1,3,1,3,5,3,250,8,3,10,3,12,3,253,
        9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,3,4,290,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,314,8,5,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,4,10,327,8,10,11,10,
        12,10,328,1,11,1,11,5,11,333,8,11,10,11,12,11,336,9,11,1,11,1,11,
        5,11,340,8,11,10,11,12,11,343,9,11,1,11,1,11,5,11,347,8,11,10,11,
        12,11,350,9,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,360,
        8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,426,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
        476,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,510,8,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,520,8,17,1,18,1,18,1,19,1,19,
        1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,638,8,27,1,27,1,27,
        3,27,642,8,27,1,27,1,27,3,27,646,8,27,1,27,1,27,3,27,650,8,27,1,
        27,1,27,3,27,654,8,27,1,27,1,27,3,27,658,8,27,1,27,1,27,3,27,662,
        8,27,1,27,1,27,3,27,666,8,27,1,27,1,27,3,27,670,8,27,1,27,1,27,3,
        27,674,8,27,1,27,1,27,3,27,678,8,27,1,27,1,27,3,27,682,8,27,1,27,
        1,27,3,27,686,8,27,1,27,1,27,3,27,690,8,27,1,27,1,27,3,27,694,8,
        27,1,27,1,27,3,27,698,8,27,1,27,1,27,3,27,702,8,27,1,27,1,27,3,27,
        706,8,27,1,27,1,27,3,27,710,8,27,1,27,1,27,3,27,714,8,27,1,27,1,
        27,3,27,718,8,27,1,27,1,27,3,27,722,8,27,1,27,1,27,3,27,726,8,27,
        1,27,1,27,3,27,730,8,27,1,27,1,27,3,27,734,8,27,1,27,1,27,3,27,738,
        8,27,1,27,1,27,3,27,742,8,27,1,27,1,27,3,27,746,8,27,1,27,1,27,3,
        27,750,8,27,1,27,1,27,3,27,754,8,27,1,27,1,27,3,27,758,8,27,1,27,
        1,27,3,27,762,8,27,1,27,1,27,3,27,766,8,27,1,27,1,27,3,27,770,8,
        27,1,27,1,27,3,27,774,8,27,1,27,1,27,3,27,778,8,27,1,27,1,27,3,27,
        782,8,27,1,27,1,27,3,27,786,8,27,1,27,1,27,3,27,790,8,27,1,27,1,
        27,3,27,794,8,27,3,27,796,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        3,30,818,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,840,8,32,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,852,8,33,
        1,34,1,34,3,34,856,8,34,1,35,1,35,3,35,860,8,35,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,3,36,871,8,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,3,36,881,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,896,8,39,1,40,1,40,1,40,1,
        41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,
        45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,
        51,940,8,51,1,52,1,52,1,52,1,52,3,52,946,8,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,3,52,957,8,52,1,53,1,53,1,53,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,971,8,55,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,981,8,56,1,57,1,57,1,57,1,58,1,58,
        1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,
        3,62,1001,8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,
        1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1034,8,71,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,1042,8,72,1,72,1,72,1,72,3,72,1047,8,72,
        1,73,1,73,1,73,1,74,1,74,3,74,1054,8,74,1,74,0,0,75,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,0,28,13,0,7,7,29,29,47,47,59,
        59,88,88,95,95,132,132,136,136,144,144,153,153,167,167,195,195,223,
        333,2,0,16,17,22,23,6,0,46,46,50,52,56,56,64,64,75,75,151,151,2,
        0,117,117,147,147,2,0,146,146,153,154,2,0,41,41,46,47,3,0,41,41,
        56,56,193,195,2,0,112,112,162,162,2,0,62,62,65,65,1,0,53,54,4,0,
        47,47,74,76,78,78,207,207,2,0,121,121,170,170,3,0,53,54,157,157,
        171,172,2,0,5,5,173,173,2,0,51,52,81,81,1,0,42,45,2,0,40,41,203,
        203,4,0,42,42,44,44,112,112,176,177,2,0,97,97,147,147,3,0,41,41,
        46,47,168,168,2,0,47,47,178,179,2,0,53,54,77,77,4,0,52,52,97,97,
        167,167,184,184,1,0,88,90,3,0,52,52,150,150,186,186,6,0,31,31,40,
        40,55,55,97,100,160,160,187,187,2,0,47,47,151,151,3,0,36,36,58,58,
        188,188,1252,0,153,1,0,0,0,2,161,1,0,0,0,4,202,1,0,0,0,6,243,1,0,
        0,0,8,289,1,0,0,0,10,313,1,0,0,0,12,315,1,0,0,0,14,317,1,0,0,0,16,
        320,1,0,0,0,18,323,1,0,0,0,20,326,1,0,0,0,22,330,1,0,0,0,24,353,
        1,0,0,0,26,359,1,0,0,0,28,425,1,0,0,0,30,475,1,0,0,0,32,509,1,0,
        0,0,34,519,1,0,0,0,36,521,1,0,0,0,38,523,1,0,0,0,40,526,1,0,0,0,
        42,529,1,0,0,0,44,532,1,0,0,0,46,535,1,0,0,0,48,538,1,0,0,0,50,541,
        1,0,0,0,52,544,1,0,0,0,54,795,1,0,0,0,56,797,1,0,0,0,58,800,1,0,
        0,0,60,803,1,0,0,0,62,819,1,0,0,0,64,822,1,0,0,0,66,841,1,0,0,0,
        68,853,1,0,0,0,70,857,1,0,0,0,72,861,1,0,0,0,74,882,1,0,0,0,76,885,
        1,0,0,0,78,888,1,0,0,0,80,897,1,0,0,0,82,900,1,0,0,0,84,903,1,0,
        0,0,86,906,1,0,0,0,88,909,1,0,0,0,90,912,1,0,0,0,92,915,1,0,0,0,
        94,918,1,0,0,0,96,921,1,0,0,0,98,926,1,0,0,0,100,929,1,0,0,0,102,
        932,1,0,0,0,104,941,1,0,0,0,106,958,1,0,0,0,108,961,1,0,0,0,110,
        964,1,0,0,0,112,972,1,0,0,0,114,982,1,0,0,0,116,985,1,0,0,0,118,
        988,1,0,0,0,120,991,1,0,0,0,122,994,1,0,0,0,124,997,1,0,0,0,126,
        1002,1,0,0,0,128,1005,1,0,0,0,130,1008,1,0,0,0,132,1011,1,0,0,0,
        134,1014,1,0,0,0,136,1017,1,0,0,0,138,1020,1,0,0,0,140,1023,1,0,
        0,0,142,1026,1,0,0,0,144,1035,1,0,0,0,146,1048,1,0,0,0,148,1051,
        1,0,0,0,150,152,3,2,1,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,
        1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,
        5,0,0,1,157,1,1,0,0,0,158,160,5,24,0,0,159,158,1,0,0,0,160,163,1,
        0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,
        0,0,0,164,168,3,6,3,0,165,167,5,24,0,0,166,165,1,0,0,0,167,170,1,
        0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,
        0,0,0,171,188,5,14,0,0,172,174,5,24,0,0,173,172,1,0,0,0,173,174,
        1,0,0,0,174,175,1,0,0,0,175,177,3,22,11,0,176,178,5,24,0,0,177,176,
        1,0,0,0,177,178,1,0,0,0,178,187,1,0,0,0,179,181,5,24,0,0,180,179,
        1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,184,3,4,2,0,183,185,
        5,24,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,173,
        1,0,0,0,186,180,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,
        1,0,0,0,189,194,1,0,0,0,190,188,1,0,0,0,191,193,5,24,0,0,192,191,
        1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,
        1,0,0,0,196,194,1,0,0,0,197,198,5,15,0,0,198,3,1,0,0,0,199,201,5,
        24,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,
        0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,209,3,6,3,0,206,208,5,
        24,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,
        0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,229,5,14,0,0,213,215,5,
        24,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,218,3,
        22,11,0,217,219,5,24,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,228,
        1,0,0,0,220,222,5,24,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,
        1,0,0,0,223,225,3,4,2,0,224,226,5,24,0,0,225,224,1,0,0,0,225,226,
        1,0,0,0,226,228,1,0,0,0,227,214,1,0,0,0,227,221,1,0,0,0,228,231,
        1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,235,1,0,0,0,231,229,
        1,0,0,0,232,234,5,24,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,
        1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,
        5,15,0,0,239,5,1,0,0,0,240,244,3,14,7,0,241,244,3,16,8,0,242,244,
        3,18,9,0,243,240,1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,245,
        1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,250,
        3,8,4,0,248,250,3,10,5,0,249,247,1,0,0,0,249,248,1,0,0,0,250,253,
        1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,7,1,0,0,0,253,251,1,
        0,0,0,254,255,5,10,0,0,255,290,5,214,0,0,256,257,5,10,0,0,257,290,
        5,215,0,0,258,259,5,10,0,0,259,290,5,216,0,0,260,261,5,10,0,0,261,
        290,5,217,0,0,262,263,5,10,0,0,263,264,5,211,0,0,264,265,5,17,0,
        0,265,290,5,218,0,0,266,267,5,10,0,0,267,268,5,199,0,0,268,269,5,
        17,0,0,269,290,5,218,0,0,270,271,5,10,0,0,271,272,5,219,0,0,272,
        273,5,17,0,0,273,274,5,218,0,0,274,275,5,12,0,0,275,276,5,23,0,0,
        276,290,5,13,0,0,277,278,5,10,0,0,278,279,5,18,0,0,279,280,5,12,
        0,0,280,290,5,13,0,0,281,282,5,10,0,0,282,290,5,220,0,0,283,284,
        5,10,0,0,284,290,5,221,0,0,285,286,5,10,0,0,286,290,5,222,0,0,287,
        288,5,10,0,0,288,290,5,71,0,0,289,254,1,0,0,0,289,256,1,0,0,0,289,
        258,1,0,0,0,289,260,1,0,0,0,289,262,1,0,0,0,289,266,1,0,0,0,289,
        270,1,0,0,0,289,277,1,0,0,0,289,281,1,0,0,0,289,283,1,0,0,0,289,
        285,1,0,0,0,289,287,1,0,0,0,290,9,1,0,0,0,291,292,3,12,6,0,292,293,
        5,53,0,0,293,314,1,0,0,0,294,295,3,12,6,0,295,296,5,54,0,0,296,314,
        1,0,0,0,297,298,3,12,6,0,298,299,5,211,0,0,299,300,5,17,0,0,300,
        301,5,79,0,0,301,314,1,0,0,0,302,303,3,12,6,0,303,304,5,211,0,0,
        304,305,5,17,0,0,305,306,5,80,0,0,306,314,1,0,0,0,307,308,3,12,6,
        0,308,309,5,212,0,0,309,314,1,0,0,0,310,311,3,12,6,0,311,312,5,213,
        0,0,312,314,1,0,0,0,313,291,1,0,0,0,313,294,1,0,0,0,313,297,1,0,
        0,0,313,302,1,0,0,0,313,307,1,0,0,0,313,310,1,0,0,0,314,11,1,0,0,
        0,315,316,5,10,0,0,316,13,1,0,0,0,317,318,5,19,0,0,318,319,3,20,
        10,0,319,15,1,0,0,0,320,321,5,9,0,0,321,322,3,20,10,0,322,17,1,0,
        0,0,323,324,7,0,0,0,324,19,1,0,0,0,325,327,7,1,0,0,326,325,1,0,0,
        0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,21,1,0,0,0,
        330,334,3,54,27,0,331,333,5,24,0,0,332,331,1,0,0,0,333,336,1,0,0,
        0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,
        0,337,341,5,10,0,0,338,340,5,24,0,0,339,338,1,0,0,0,340,343,1,0,
        0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,
        0,0,344,348,3,24,12,0,345,347,5,24,0,0,346,345,1,0,0,0,347,350,1,
        0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,
        0,0,0,351,352,5,11,0,0,352,23,1,0,0,0,353,354,3,26,13,0,354,25,1,
        0,0,0,355,360,3,28,14,0,356,360,3,30,15,0,357,360,3,32,16,0,358,
        360,3,34,17,0,359,355,1,0,0,0,359,356,1,0,0,0,359,357,1,0,0,0,359,
        358,1,0,0,0,360,27,1,0,0,0,361,362,3,38,19,0,362,363,3,36,18,0,363,
        364,3,38,19,0,364,365,3,36,18,0,365,366,3,38,19,0,366,367,3,36,18,
        0,367,368,3,38,19,0,368,426,1,0,0,0,369,370,3,40,20,0,370,371,3,
        36,18,0,371,372,3,40,20,0,372,373,3,36,18,0,373,374,3,40,20,0,374,
        375,3,36,18,0,375,376,3,40,20,0,376,426,1,0,0,0,377,378,3,42,21,
        0,378,379,3,36,18,0,379,380,3,42,21,0,380,381,3,36,18,0,381,382,
        3,42,21,0,382,383,3,36,18,0,383,384,3,42,21,0,384,426,1,0,0,0,385,
        386,3,44,22,0,386,387,3,36,18,0,387,388,3,44,22,0,388,389,3,36,18,
        0,389,390,3,44,22,0,390,391,3,36,18,0,391,392,3,44,22,0,392,426,
        1,0,0,0,393,394,3,46,23,0,394,395,3,36,18,0,395,396,3,46,23,0,396,
        397,3,36,18,0,397,398,3,46,23,0,398,399,3,36,18,0,399,400,3,46,23,
        0,400,426,1,0,0,0,401,402,3,48,24,0,402,403,3,36,18,0,403,404,3,
        48,24,0,404,405,3,36,18,0,405,406,3,48,24,0,406,407,3,36,18,0,407,
        408,3,48,24,0,408,426,1,0,0,0,409,410,3,50,25,0,410,411,3,36,18,
        0,411,412,3,50,25,0,412,413,3,36,18,0,413,414,3,50,25,0,414,415,
        3,36,18,0,415,416,3,50,25,0,416,426,1,0,0,0,417,418,3,52,26,0,418,
        419,3,36,18,0,419,420,3,52,26,0,420,421,3,36,18,0,421,422,3,52,26,
        0,422,423,3,36,18,0,423,424,3,52,26,0,424,426,1,0,0,0,425,361,1,
        0,0,0,425,369,1,0,0,0,425,377,1,0,0,0,425,385,1,0,0,0,425,393,1,
        0,0,0,425,401,1,0,0,0,425,409,1,0,0,0,425,417,1,0,0,0,426,29,1,0,
        0,0,427,428,3,38,19,0,428,429,3,36,18,0,429,430,3,38,19,0,430,431,
        3,36,18,0,431,432,3,38,19,0,432,476,1,0,0,0,433,434,3,40,20,0,434,
        435,3,36,18,0,435,436,3,40,20,0,436,437,3,36,18,0,437,438,3,40,20,
        0,438,476,1,0,0,0,439,440,3,42,21,0,440,441,3,36,18,0,441,442,3,
        42,21,0,442,443,3,36,18,0,443,444,3,42,21,0,444,476,1,0,0,0,445,
        446,3,44,22,0,446,447,3,36,18,0,447,448,3,44,22,0,448,449,3,36,18,
        0,449,450,3,44,22,0,450,476,1,0,0,0,451,452,3,46,23,0,452,453,3,
        36,18,0,453,454,3,46,23,0,454,455,3,36,18,0,455,456,3,46,23,0,456,
        476,1,0,0,0,457,458,3,48,24,0,458,459,3,36,18,0,459,460,3,48,24,
        0,460,461,3,36,18,0,461,462,3,48,24,0,462,476,1,0,0,0,463,464,3,
        50,25,0,464,465,3,36,18,0,465,466,3,50,25,0,466,467,3,36,18,0,467,
        468,3,50,25,0,468,476,1,0,0,0,469,470,3,52,26,0,470,471,3,36,18,
        0,471,472,3,52,26,0,472,473,3,36,18,0,473,474,3,52,26,0,474,476,
        1,0,0,0,475,427,1,0,0,0,475,433,1,0,0,0,475,439,1,0,0,0,475,445,
        1,0,0,0,475,451,1,0,0,0,475,457,1,0,0,0,475,463,1,0,0,0,475,469,
        1,0,0,0,476,31,1,0,0,0,477,478,3,38,19,0,478,479,3,36,18,0,479,480,
        3,38,19,0,480,510,1,0,0,0,481,482,3,40,20,0,482,483,3,36,18,0,483,
        484,3,40,20,0,484,510,1,0,0,0,485,486,3,42,21,0,486,487,3,36,18,
        0,487,488,3,42,21,0,488,510,1,0,0,0,489,490,3,44,22,0,490,491,3,
        36,18,0,491,492,3,44,22,0,492,510,1,0,0,0,493,494,3,46,23,0,494,
        495,3,36,18,0,495,496,3,46,23,0,496,510,1,0,0,0,497,498,3,48,24,
        0,498,499,3,36,18,0,499,500,3,48,24,0,500,510,1,0,0,0,501,502,3,
        50,25,0,502,503,3,36,18,0,503,504,3,50,25,0,504,510,1,0,0,0,505,
        506,3,52,26,0,506,507,3,36,18,0,507,508,3,52,26,0,508,510,1,0,0,
        0,509,477,1,0,0,0,509,481,1,0,0,0,509,485,1,0,0,0,509,489,1,0,0,
        0,509,493,1,0,0,0,509,497,1,0,0,0,509,501,1,0,0,0,509,505,1,0,0,
        0,510,33,1,0,0,0,511,520,3,38,19,0,512,520,3,40,20,0,513,520,3,42,
        21,0,514,520,3,44,22,0,515,520,3,46,23,0,516,520,3,48,24,0,517,520,
        3,50,25,0,518,520,3,52,26,0,519,511,1,0,0,0,519,512,1,0,0,0,519,
        513,1,0,0,0,519,514,1,0,0,0,519,515,1,0,0,0,519,516,1,0,0,0,519,
        517,1,0,0,0,519,518,1,0,0,0,520,35,1,0,0,0,521,522,5,25,0,0,522,
        37,1,0,0,0,523,524,5,21,0,0,524,525,5,1,0,0,525,39,1,0,0,0,526,527,
        5,21,0,0,527,528,5,2,0,0,528,41,1,0,0,0,529,530,5,21,0,0,530,531,
        5,3,0,0,531,43,1,0,0,0,532,533,5,21,0,0,533,534,5,4,0,0,534,45,1,
        0,0,0,535,536,5,21,0,0,536,537,5,5,0,0,537,47,1,0,0,0,538,539,5,
        21,0,0,539,540,5,6,0,0,540,49,1,0,0,0,541,542,5,21,0,0,542,543,5,
        7,0,0,543,51,1,0,0,0,544,545,5,21,0,0,545,546,5,8,0,0,546,53,1,0,
        0,0,547,796,5,115,0,0,548,796,5,49,0,0,549,796,5,45,0,0,550,796,
        5,63,0,0,551,796,5,64,0,0,552,796,5,121,0,0,553,796,5,48,0,0,554,
        796,5,122,0,0,555,796,5,67,0,0,556,796,5,68,0,0,557,796,5,69,0,0,
        558,796,5,70,0,0,559,796,5,40,0,0,560,796,5,129,0,0,561,796,5,130,
        0,0,562,796,5,42,0,0,563,796,5,133,0,0,564,796,5,200,0,0,565,796,
        5,137,0,0,566,796,5,173,0,0,567,796,5,83,0,0,568,796,5,139,0,0,569,
        796,5,52,0,0,570,796,5,91,0,0,571,796,5,141,0,0,572,796,5,5,0,0,
        573,796,5,87,0,0,574,796,5,44,0,0,575,796,5,201,0,0,576,796,5,75,
        0,0,577,796,5,94,0,0,578,796,5,43,0,0,579,796,5,104,0,0,580,796,
        5,106,0,0,581,796,5,109,0,0,582,583,5,117,0,0,583,584,5,17,0,0,584,
        796,5,152,0,0,585,586,5,203,0,0,586,587,5,17,0,0,587,796,5,202,0,
        0,588,589,5,116,0,0,589,590,5,17,0,0,590,796,5,104,0,0,591,592,5,
        59,0,0,592,593,5,17,0,0,593,796,5,61,0,0,594,595,5,123,0,0,595,596,
        5,17,0,0,596,796,5,117,0,0,597,598,5,71,0,0,598,599,5,17,0,0,599,
        796,5,72,0,0,600,601,5,79,0,0,601,602,5,17,0,0,602,796,5,58,0,0,
        603,604,5,135,0,0,604,605,5,17,0,0,605,796,5,20,0,0,606,607,5,85,
        0,0,607,608,5,17,0,0,608,796,5,86,0,0,609,610,5,138,0,0,610,611,
        5,17,0,0,611,796,5,151,0,0,612,613,5,90,0,0,613,614,5,17,0,0,614,
        796,5,181,0,0,615,616,5,140,0,0,616,617,5,17,0,0,617,796,5,182,0,
        0,618,619,5,92,0,0,619,620,5,17,0,0,620,796,5,93,0,0,621,622,5,145,
        0,0,622,623,5,17,0,0,623,796,5,185,0,0,624,625,5,101,0,0,625,626,
        5,17,0,0,626,796,5,102,0,0,627,628,5,103,0,0,628,629,5,17,0,0,629,
        796,5,97,0,0,630,631,5,131,0,0,631,632,5,17,0,0,632,633,5,119,0,
        0,633,634,5,17,0,0,634,796,5,97,0,0,635,637,5,26,0,0,636,638,3,56,
        28,0,637,636,1,0,0,0,637,638,1,0,0,0,638,796,1,0,0,0,639,641,5,113,
        0,0,640,642,3,58,29,0,641,640,1,0,0,0,641,642,1,0,0,0,642,796,1,
        0,0,0,643,645,5,114,0,0,644,646,3,60,30,0,645,644,1,0,0,0,645,646,
        1,0,0,0,646,796,1,0,0,0,647,649,5,118,0,0,648,650,3,62,31,0,649,
        648,1,0,0,0,649,650,1,0,0,0,650,796,1,0,0,0,651,653,5,27,0,0,652,
        654,3,64,32,0,653,652,1,0,0,0,653,654,1,0,0,0,654,796,1,0,0,0,655,
        657,5,119,0,0,656,658,3,72,36,0,657,656,1,0,0,0,657,658,1,0,0,0,
        658,796,1,0,0,0,659,661,5,59,0,0,660,662,3,74,37,0,661,660,1,0,0,
        0,661,662,1,0,0,0,662,796,1,0,0,0,663,665,5,46,0,0,664,666,3,76,
        38,0,665,664,1,0,0,0,665,666,1,0,0,0,666,796,1,0,0,0,667,669,5,120,
        0,0,668,670,3,78,39,0,669,668,1,0,0,0,669,670,1,0,0,0,670,796,1,
        0,0,0,671,673,5,60,0,0,672,674,3,82,41,0,673,672,1,0,0,0,673,674,
        1,0,0,0,674,796,1,0,0,0,675,677,5,66,0,0,676,678,3,84,42,0,677,676,
        1,0,0,0,677,678,1,0,0,0,678,796,1,0,0,0,679,681,5,29,0,0,680,682,
        3,86,43,0,681,680,1,0,0,0,681,682,1,0,0,0,682,796,1,0,0,0,683,685,
        5,73,0,0,684,686,3,88,44,0,685,684,1,0,0,0,685,686,1,0,0,0,686,796,
        1,0,0,0,687,689,5,126,0,0,688,690,3,90,45,0,689,688,1,0,0,0,689,
        690,1,0,0,0,690,796,1,0,0,0,691,693,5,128,0,0,692,694,3,92,46,0,
        693,692,1,0,0,0,693,694,1,0,0,0,694,796,1,0,0,0,695,697,5,51,0,0,
        696,698,3,94,47,0,697,696,1,0,0,0,697,698,1,0,0,0,698,796,1,0,0,
        0,699,701,5,28,0,0,700,702,3,96,48,0,701,700,1,0,0,0,701,702,1,0,
        0,0,702,796,1,0,0,0,703,705,5,30,0,0,704,706,3,98,49,0,705,704,1,
        0,0,0,705,706,1,0,0,0,706,796,1,0,0,0,707,709,5,133,0,0,708,710,
        3,100,50,0,709,708,1,0,0,0,709,710,1,0,0,0,710,796,1,0,0,0,711,713,
        5,134,0,0,712,714,3,102,51,0,713,712,1,0,0,0,713,714,1,0,0,0,714,
        796,1,0,0,0,715,717,5,38,0,0,716,718,3,104,52,0,717,716,1,0,0,0,
        717,718,1,0,0,0,718,796,1,0,0,0,719,721,5,37,0,0,720,722,3,104,52,
        0,721,720,1,0,0,0,721,722,1,0,0,0,722,796,1,0,0,0,723,725,5,136,
        0,0,724,726,3,108,54,0,725,724,1,0,0,0,725,726,1,0,0,0,726,796,1,
        0,0,0,727,729,5,206,0,0,728,730,3,110,55,0,729,728,1,0,0,0,729,730,
        1,0,0,0,730,796,1,0,0,0,731,733,5,124,0,0,732,734,3,112,56,0,733,
        732,1,0,0,0,733,734,1,0,0,0,734,796,1,0,0,0,735,737,5,125,0,0,736,
        738,3,116,58,0,737,736,1,0,0,0,737,738,1,0,0,0,738,796,1,0,0,0,739,
        741,5,31,0,0,740,742,3,118,59,0,741,740,1,0,0,0,741,742,1,0,0,0,
        742,796,1,0,0,0,743,745,5,55,0,0,744,746,3,120,60,0,745,744,1,0,
        0,0,745,746,1,0,0,0,746,796,1,0,0,0,747,749,5,32,0,0,748,750,3,122,
        61,0,749,748,1,0,0,0,749,750,1,0,0,0,750,796,1,0,0,0,751,753,5,34,
        0,0,752,754,3,124,62,0,753,752,1,0,0,0,753,754,1,0,0,0,754,796,1,
        0,0,0,755,757,5,39,0,0,756,758,3,128,64,0,757,756,1,0,0,0,757,758,
        1,0,0,0,758,796,1,0,0,0,759,761,5,142,0,0,760,762,3,130,65,0,761,
        760,1,0,0,0,761,762,1,0,0,0,762,796,1,0,0,0,763,765,5,144,0,0,764,
        766,3,132,66,0,765,764,1,0,0,0,765,766,1,0,0,0,766,796,1,0,0,0,767,
        769,5,35,0,0,768,770,3,134,67,0,769,768,1,0,0,0,769,770,1,0,0,0,
        770,796,1,0,0,0,771,773,5,146,0,0,772,774,3,136,68,0,773,772,1,0,
        0,0,773,774,1,0,0,0,774,796,1,0,0,0,775,777,5,100,0,0,776,778,3,
        140,70,0,777,776,1,0,0,0,777,778,1,0,0,0,778,796,1,0,0,0,779,781,
        5,210,0,0,780,782,3,142,71,0,781,780,1,0,0,0,781,782,1,0,0,0,782,
        796,1,0,0,0,783,785,5,33,0,0,784,786,3,138,69,0,785,784,1,0,0,0,
        785,786,1,0,0,0,786,796,1,0,0,0,787,789,5,105,0,0,788,790,3,144,
        72,0,789,788,1,0,0,0,789,790,1,0,0,0,790,796,1,0,0,0,791,793,5,110,
        0,0,792,794,3,148,74,0,793,792,1,0,0,0,793,794,1,0,0,0,794,796,1,
        0,0,0,795,547,1,0,0,0,795,548,1,0,0,0,795,549,1,0,0,0,795,550,1,
        0,0,0,795,551,1,0,0,0,795,552,1,0,0,0,795,553,1,0,0,0,795,554,1,
        0,0,0,795,555,1,0,0,0,795,556,1,0,0,0,795,557,1,0,0,0,795,558,1,
        0,0,0,795,559,1,0,0,0,795,560,1,0,0,0,795,561,1,0,0,0,795,562,1,
        0,0,0,795,563,1,0,0,0,795,564,1,0,0,0,795,565,1,0,0,0,795,566,1,
        0,0,0,795,567,1,0,0,0,795,568,1,0,0,0,795,569,1,0,0,0,795,570,1,
        0,0,0,795,571,1,0,0,0,795,572,1,0,0,0,795,573,1,0,0,0,795,574,1,
        0,0,0,795,575,1,0,0,0,795,576,1,0,0,0,795,577,1,0,0,0,795,578,1,
        0,0,0,795,579,1,0,0,0,795,580,1,0,0,0,795,581,1,0,0,0,795,582,1,
        0,0,0,795,585,1,0,0,0,795,588,1,0,0,0,795,591,1,0,0,0,795,594,1,
        0,0,0,795,597,1,0,0,0,795,600,1,0,0,0,795,603,1,0,0,0,795,606,1,
        0,0,0,795,609,1,0,0,0,795,612,1,0,0,0,795,615,1,0,0,0,795,618,1,
        0,0,0,795,621,1,0,0,0,795,624,1,0,0,0,795,627,1,0,0,0,795,630,1,
        0,0,0,795,635,1,0,0,0,795,639,1,0,0,0,795,643,1,0,0,0,795,647,1,
        0,0,0,795,651,1,0,0,0,795,655,1,0,0,0,795,659,1,0,0,0,795,663,1,
        0,0,0,795,667,1,0,0,0,795,671,1,0,0,0,795,675,1,0,0,0,795,679,1,
        0,0,0,795,683,1,0,0,0,795,687,1,0,0,0,795,691,1,0,0,0,795,695,1,
        0,0,0,795,699,1,0,0,0,795,703,1,0,0,0,795,707,1,0,0,0,795,711,1,
        0,0,0,795,715,1,0,0,0,795,719,1,0,0,0,795,723,1,0,0,0,795,727,1,
        0,0,0,795,731,1,0,0,0,795,735,1,0,0,0,795,739,1,0,0,0,795,743,1,
        0,0,0,795,747,1,0,0,0,795,751,1,0,0,0,795,755,1,0,0,0,795,759,1,
        0,0,0,795,763,1,0,0,0,795,767,1,0,0,0,795,771,1,0,0,0,795,775,1,
        0,0,0,795,779,1,0,0,0,795,783,1,0,0,0,795,787,1,0,0,0,795,791,1,
        0,0,0,796,55,1,0,0,0,797,798,5,17,0,0,798,799,7,2,0,0,799,57,1,0,
        0,0,800,801,5,17,0,0,801,802,7,3,0,0,802,59,1,0,0,0,803,817,5,17,
        0,0,804,818,5,148,0,0,805,818,5,68,0,0,806,818,5,149,0,0,807,818,
        5,150,0,0,808,809,5,204,0,0,809,810,5,17,0,0,810,818,5,163,0,0,811,
        812,5,85,0,0,812,813,5,17,0,0,813,818,5,191,0,0,814,815,5,205,0,
        0,815,816,5,17,0,0,816,818,5,192,0,0,817,804,1,0,0,0,817,805,1,0,
        0,0,817,806,1,0,0,0,817,807,1,0,0,0,817,808,1,0,0,0,817,811,1,0,
        0,0,817,814,1,0,0,0,818,61,1,0,0,0,819,820,5,17,0,0,820,821,7,4,
        0,0,821,63,1,0,0,0,822,839,5,17,0,0,823,840,5,57,0,0,824,840,5,46,
        0,0,825,840,5,58,0,0,826,840,5,47,0,0,827,840,5,41,0,0,828,840,5,
        155,0,0,829,830,5,43,0,0,830,840,3,66,33,0,831,832,5,44,0,0,832,
        840,3,68,34,0,833,834,5,45,0,0,834,840,3,66,33,0,835,836,5,42,0,
        0,836,840,3,68,34,0,837,838,5,51,0,0,838,840,3,70,35,0,839,823,1,
        0,0,0,839,824,1,0,0,0,839,825,1,0,0,0,839,826,1,0,0,0,839,827,1,
        0,0,0,839,828,1,0,0,0,839,829,1,0,0,0,839,831,1,0,0,0,839,833,1,
        0,0,0,839,835,1,0,0,0,839,837,1,0,0,0,840,65,1,0,0,0,841,851,5,17,
        0,0,842,852,5,46,0,0,843,852,5,47,0,0,844,852,5,41,0,0,845,846,5,
        42,0,0,846,847,5,17,0,0,847,852,5,155,0,0,848,849,5,44,0,0,849,850,
        5,17,0,0,850,852,5,155,0,0,851,842,1,0,0,0,851,843,1,0,0,0,851,844,
        1,0,0,0,851,845,1,0,0,0,851,848,1,0,0,0,851,852,1,0,0,0,852,67,1,
        0,0,0,853,855,5,17,0,0,854,856,7,5,0,0,855,854,1,0,0,0,855,856,1,
        0,0,0,856,69,1,0,0,0,857,859,5,17,0,0,858,860,7,6,0,0,859,858,1,
        0,0,0,859,860,1,0,0,0,860,71,1,0,0,0,861,880,5,17,0,0,862,881,5,
        97,0,0,863,864,5,98,0,0,864,865,5,17,0,0,865,881,5,36,0,0,866,881,
        5,68,0,0,867,870,5,156,0,0,868,869,5,17,0,0,869,871,5,196,0,0,870,
        868,1,0,0,0,870,871,1,0,0,0,871,881,1,0,0,0,872,881,5,157,0,0,873,
        874,5,208,0,0,874,875,5,17,0,0,875,881,5,196,0,0,876,881,5,158,0,
        0,877,881,5,159,0,0,878,881,5,160,0,0,879,881,5,161,0,0,880,862,
        1,0,0,0,880,863,1,0,0,0,880,866,1,0,0,0,880,867,1,0,0,0,880,872,
        1,0,0,0,880,873,1,0,0,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,
        1,0,0,0,880,879,1,0,0,0,881,73,1,0,0,0,882,883,5,17,0,0,883,884,
        5,61,0,0,884,75,1,0,0,0,885,886,5,17,0,0,886,887,7,7,0,0,887,77,
        1,0,0,0,888,895,5,17,0,0,889,896,5,163,0,0,890,896,5,164,0,0,891,
        896,5,165,0,0,892,896,3,80,40,0,893,896,5,167,0,0,894,896,5,41,0,
        0,895,889,1,0,0,0,895,890,1,0,0,0,895,891,1,0,0,0,895,892,1,0,0,
        0,895,893,1,0,0,0,895,894,1,0,0,0,896,79,1,0,0,0,897,898,5,17,0,
        0,898,899,7,5,0,0,899,81,1,0,0,0,900,901,5,17,0,0,901,902,7,8,0,
        0,902,83,1,0,0,0,903,904,5,17,0,0,904,905,7,9,0,0,905,85,1,0,0,0,
        906,907,5,17,0,0,907,908,7,10,0,0,908,87,1,0,0,0,909,910,5,17,0,
        0,910,911,5,168,0,0,911,89,1,0,0,0,912,913,5,17,0,0,913,914,7,11,
        0,0,914,91,1,0,0,0,915,916,5,17,0,0,916,917,7,12,0,0,917,93,1,0,
        0,0,918,919,5,17,0,0,919,920,7,13,0,0,920,95,1,0,0,0,921,922,5,17,
        0,0,922,923,5,47,0,0,923,924,5,17,0,0,924,925,7,14,0,0,925,97,1,
        0,0,0,926,927,5,17,0,0,927,928,7,15,0,0,928,99,1,0,0,0,929,930,5,
        17,0,0,930,931,7,9,0,0,931,101,1,0,0,0,932,939,5,17,0,0,933,940,
        5,68,0,0,934,940,5,175,0,0,935,940,5,47,0,0,936,937,5,85,0,0,937,
        938,5,17,0,0,938,940,5,163,0,0,939,933,1,0,0,0,939,934,1,0,0,0,939,
        935,1,0,0,0,939,936,1,0,0,0,940,103,1,0,0,0,941,956,5,17,0,0,942,
        945,5,46,0,0,943,944,5,17,0,0,944,946,5,112,0,0,945,943,1,0,0,0,
        945,946,1,0,0,0,946,957,1,0,0,0,947,957,5,40,0,0,948,957,5,200,0,
        0,949,957,5,5,0,0,950,957,5,41,0,0,951,952,5,203,0,0,952,953,5,17,
        0,0,953,957,5,202,0,0,954,955,5,206,0,0,955,957,3,106,53,0,956,942,
        1,0,0,0,956,947,1,0,0,0,956,948,1,0,0,0,956,949,1,0,0,0,956,950,
        1,0,0,0,956,951,1,0,0,0,956,954,1,0,0,0,957,105,1,0,0,0,958,959,
        5,17,0,0,959,960,7,16,0,0,960,107,1,0,0,0,961,962,5,17,0,0,962,963,
        7,17,0,0,963,109,1,0,0,0,964,970,5,17,0,0,965,971,5,41,0,0,966,971,
        5,40,0,0,967,968,5,203,0,0,968,969,5,17,0,0,969,971,5,202,0,0,970,
        965,1,0,0,0,970,966,1,0,0,0,970,967,1,0,0,0,971,111,1,0,0,0,972,
        973,5,17,0,0,973,980,5,209,0,0,974,975,5,54,0,0,975,981,3,114,57,
        0,976,977,5,53,0,0,977,981,3,114,57,0,978,981,5,75,0,0,979,981,5,
        197,0,0,980,974,1,0,0,0,980,976,1,0,0,0,980,978,1,0,0,0,980,979,
        1,0,0,0,981,113,1,0,0,0,982,983,5,17,0,0,983,984,7,18,0,0,984,115,
        1,0,0,0,985,986,5,17,0,0,986,987,5,52,0,0,987,117,1,0,0,0,988,989,
        5,17,0,0,989,990,7,19,0,0,990,119,1,0,0,0,991,992,5,17,0,0,992,993,
        7,20,0,0,993,121,1,0,0,0,994,995,5,17,0,0,995,996,7,15,0,0,996,123,
        1,0,0,0,997,1000,5,17,0,0,998,1001,5,180,0,0,999,1001,3,126,63,0,
        1000,998,1,0,0,0,1000,999,1,0,0,0,1001,125,1,0,0,0,1002,1003,5,17,
        0,0,1003,1004,7,21,0,0,1004,127,1,0,0,0,1005,1006,5,17,0,0,1006,
        1007,7,9,0,0,1007,129,1,0,0,0,1008,1009,5,17,0,0,1009,1010,7,9,0,
        0,1010,131,1,0,0,0,1011,1012,5,17,0,0,1012,1013,7,22,0,0,1013,133,
        1,0,0,0,1014,1015,5,17,0,0,1015,1016,7,23,0,0,1016,135,1,0,0,0,1017,
        1018,5,17,0,0,1018,1019,7,24,0,0,1019,137,1,0,0,0,1020,1021,5,17,
        0,0,1021,1022,7,25,0,0,1022,139,1,0,0,0,1023,1024,5,17,0,0,1024,
        1025,7,26,0,0,1025,141,1,0,0,0,1026,1033,5,17,0,0,1027,1034,5,148,
        0,0,1028,1034,5,149,0,0,1029,1034,5,189,0,0,1030,1031,5,205,0,0,
        1031,1032,5,17,0,0,1032,1034,5,192,0,0,1033,1027,1,0,0,0,1033,1028,
        1,0,0,0,1033,1029,1,0,0,0,1033,1030,1,0,0,0,1034,143,1,0,0,0,1035,
        1046,5,17,0,0,1036,1047,5,74,0,0,1037,1047,5,190,0,0,1038,1047,5,
        149,0,0,1039,1041,5,82,0,0,1040,1042,3,146,73,0,1041,1040,1,0,0,
        0,1041,1042,1,0,0,0,1042,1047,1,0,0,0,1043,1047,5,93,0,0,1044,1047,
        5,94,0,0,1045,1047,5,106,0,0,1046,1036,1,0,0,0,1046,1037,1,0,0,0,
        1046,1038,1,0,0,0,1046,1039,1,0,0,0,1046,1043,1,0,0,0,1046,1044,
        1,0,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,145,1,0,0,0,1048,
        1049,5,17,0,0,1049,1050,5,84,0,0,1050,147,1,0,0,0,1051,1053,5,17,
        0,0,1052,1054,7,27,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
        149,1,0,0,0,93,153,161,168,173,177,180,184,186,188,194,202,209,214,
        218,221,225,227,229,235,243,245,249,251,289,313,328,334,341,348,
        359,425,475,509,519,637,641,645,649,653,657,661,665,669,673,677,
        681,685,689,693,697,701,705,709,713,717,721,725,729,733,737,741,
        745,749,753,757,761,765,769,773,777,781,785,789,793,795,817,839,
        851,855,859,870,880,895,939,945,956,970,980,1000,1033,1041,1046,
        1053
    ]

class SCSSParser ( Parser ):

    grammarFileName = "SCSSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'.'", "':'", "';'", "'('", "')'", "'{'", "'}'", 
                     "'_'", "'-'", "'not'", "'#'", "'to'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "' '", "'background'", 
                     "'border'", "'list'", "'font'", "'margin'", "'outline'", 
                     "'padding'", "'text'", "'page'", "'speak'", "'break'", 
                     "'max'", "'min'", "'pause'", "'height'", "'width'", 
                     "'left'", "'top'", "'bottom'", "'right'", "'color'", 
                     "'style'", "'content'", "'azimuth'", "'attachment'", 
                     "'image'", "'position'", "'after'", "'before'", "'overflow'", 
                     "'repeat'", "'collapse'", "'spacing'", "'caption'", 
                     "'counter'", "'side'", "'increment'", "'clear'", "'clip'", 
                     "'reset'", "'cue'", "'cursor'", "'direction'", "'display'", 
                     "'elevation'", "'empty'", "'cells'", "'float'", "'family'", 
                     "'size'", "'variant'", "'inside'", "'weight'", "'letter'", 
                     "'line'", "'type'", "'pitch'", "'orphans'", "'range'", 
                     "'play'", "'during'", "'richness'", "'header'", "'numeral'", 
                     "'punctuation'", "'quotes'", "'speech'", "'rate'", 
                     "'stress'", "'table'", "'layout'", "'align'", "'decoration'", 
                     "'indent'", "'transform'", "'unicode'", "'bidi'", "'vertical'", 
                     "'visibility'", "'voice'", "'volume'", "'white'", "'space'", 
                     "'widows'", "'word'", "'z'", "'index'", "'alignment'", 
                     "'animation'", "'appearance'", "'backface'", "'baseline'", 
                     "'bookmark'", "'box'", "'column'", "'columns'", "'crop'", 
                     "'dominant'", "'drop'", "'fit'", "'grid'", "'hanging'", 
                     "'hyphenate'", "'hyphens'", "'icon'", "'inline'", "'mark'", 
                     "'marks'", "'marquee'", "'move'", "'nav'", "'opacity'", 
                     "'perspective'", "'phonemes'", "'rendering'", "'resize'", 
                     "'rest'", "'rotation'", "'ruby'", "'string'", "'target'", 
                     "'adjust'", "'delay'", "'duration'", "'name'", "'origin'", 
                     "'shift'", "'label'", "'level'", "'radius'", "'flex'", 
                     "'lines'", "'orient'", "'pack'", "'shadow'", "'sizing'", 
                     "'profile'", "'count'", "'fill'", "'gap'", "'rule'", 
                     "'span'", "'offset'", "'stretch'", "'rows'", "'character'", 
                     "'resource'", "'orientation'", "'stacking'", "'speed'", 
                     "'down'", "'up'", "'x'", "'y'", "'policy'", "'trim'", 
                     "'intent'", "'point'", "'overhang'", "'set'", "'new'", 
                     "'justify'", "'wrap'", "'property'", "'balance'", "'state'", 
                     "'function'", "'outset'", "'slice'", "'source'", "'group'", 
                     "'value'", "'strategy'", "'last'", "'monochrome'", 
                     "'scan'", "'ratio'", "'aspect'", "'iteration'", "'timing'", 
                     "'device'", "'skretch'", "'ordinal'", "'initial'", 
                     "'transition'", "'first'", "'selection'", "'placeholder'", 
                     "'hover'", "'active'", "'focus'", "'visited'", "'child'", 
                     "'nth'", "'disabled'", "'checked'", "'required'", "'a'", 
                     "'abbr'", "'acronym'", "'address'", "'applet'", "'area'", 
                     "'b'", "'base'", "'basefont'", "'bdo'", "'big'", "'blockquote'", 
                     "'body'", "'br'", "'button'", "'center'", "'cite'", 
                     "'code'", "'col'", "'colgroup'", "'dd'", "'del'", "'dfn'", 
                     "'dir'", "'div'", "'dl'", "'dt'", "'em'", "'fieldset'", 
                     "'form'", "'frame'", "'frameset'", "'h1'", "'h2'", 
                     "'h3'", "'h4'", "'h5'", "'h6'", "'head'", "'hr'", "'html'", 
                     "'i'", "'iframe'", "'img'", "'input'", "'ins'", "'kbd'", 
                     "'legend'", "'li'", "'map'", "'menu'", "'meta'", "'noframes'", 
                     "'noscript'", "'object'", "'ol'", "'optgroup'", "'option'", 
                     "'p'", "'param'", "'pre'", "'q'", "'s'", "'samp'", 
                     "'script'", "'select'", "'small'", "'strike'", "'strong'", 
                     "'sub'", "'sup'", "'tbody'", "'td'", "'template'", 
                     "'textarea'", "'tfoot'", "'th'", "'thead'", "'title'", 
                     "'tr'", "'tt'", "'u'", "'ul'", "'var'", "'article'", 
                     "'aside'", "'audio'", "'bdi'", "'canvas'", "'command'", 
                     "'datalist'", "'details'", "'embed'", "'figcaption'", 
                     "'figure'", "'footer'", "'hgroup'", "'keygen'", "'main'", 
                     "'meter'", "'output'", "'progress'", "' progress-bar-stripes'", 
                     "'rp'", "'rt'", "'section'", "'summary'", "'svg'", 
                     "'track'", "'video'", "'wbr'" ]

    symbolicNames = [ "<INVALID>", "AbsLength", "FontRelative", "ViewportRelative", 
                      "Angle", "Resolution", "Freq", "Time", "Percentage", 
                      "Dot", "Colon", "Semi", "Lparen", "Rparen", "BlockStart", 
                      "BlockEnd", "Underscore", "Minus", "Not", "Hash", 
                      "To", "NumberReg", "Char", "Digit", "WhiteSpace", 
                      "SpaceChar", "Background", "Border", "List", "Font", 
                      "Margin", "Outline", "Padding", "Text", "Page", "Speak", 
                      "Break", "Max", "Min", "Pause", "Height", "Width", 
                      "Left", "Top", "Right", "Bottom", "Color", "Style", 
                      "Content", "Azimuth", "Attachment", "Image", "Position", 
                      "After", "Before", "Overflow", "Repeat", "Collapse", 
                      "Spacing", "Caption", "Counter", "Side", "Increment", 
                      "Clear", "Clip", "Reset", "Cue", "Cursor", "Direction", 
                      "Display", "Elevation", "Empty", "Cells", "Float", 
                      "Family", "Size", "Variant", "Inside", "Weight", "Letter", 
                      "Line", "Type", "Pitch", "Orphans", "Range", "Play", 
                      "During", "Richness", "Header", "Numeral", "Punctuation", 
                      "Quotes", "Speech", "Rate", "Stress", "Table", "Layout", 
                      "Align", "Decoration", "Indent", "Transform", "Unicode", 
                      "Bidi", "Vertical", "Visibility", "Voice", "Volume", 
                      "White", "Space", "Widows", "Word", "Z", "Index", 
                      "Alignment", "Animation", "Appearance", "Backface", 
                      "Baseline", "Bookmark", "Box", "Column", "Columns", 
                      "Crop", "Dominant", "Drop", "Fit", "Grid", "Hanging", 
                      "Hyphenate", "Hyphens", "Icon", "Inline", "Mark", 
                      "Marks", "Marquee", "Move", "Nav", "Opacity", "Perspective", 
                      "Phonemes", "Rendering", "Resize", "Rest", "Rotation", 
                      "Ruby", "String", "Target", "Adjust", "Delay", "Duration", 
                      "Name", "Origin", "Shift", "Label", "Level", "Radius", 
                      "Flex", "Lines", "Orient", "Pack", "Shadow", "Sizing", 
                      "Profile", "Count", "Fill", "Gap", "Rule", "Span", 
                      "Offset", "Stretch", "Rows", "Character", "Resource", 
                      "Orientation", "Stacking", "Speed", "Down", "Up", 
                      "X", "Y", "Policy", "Trim", "Intent", "Point", "Overhang", 
                      "Set", "New", "Justify", "Wrap", "Property", "Balance", 
                      "State", "Function", "Outset", "Slice", "Source", 
                      "Group", "Value", "Strategy", "Last", "Monochrome", 
                      "Scan", "Ratio", "Aspect", "Iteration", "Timing", 
                      "Device", "Skretch", "Ordinal", "Initial", "Transition", 
                      "First", "Selection", "Placeholder", "Hover", "Active", 
                      "Focus", "Visited", "Child", "Nth", "Disabled", "Checked", 
                      "Required", "A", "Abbr", "Acronym", "Address", "Applet", 
                      "Area", "B", "Base", "Basefont", "Bdo", "Big", "Blockquote", 
                      "Body", "Br", "Button", "Center", "Cite", "Code", 
                      "Col", "Colgroup", "Dd", "Del", "Dfn", "Dir", "Div", 
                      "Dl", "Dt", "Em", "Fieldset", "Form", "Frame", "Frameset", 
                      "H1", "H2", "H3", "H4", "H5", "H6", "Head", "Hr", 
                      "Html", "I", "Iframe", "Img", "Input", "Ins", "Kbd", 
                      "Legend", "Li", "Map", "Menu", "Meta", "Noframes", 
                      "Noscript", "Object", "Ol", "Optgroup", "Option", 
                      "P", "Param", "Pre", "Q", "S", "Samp", "Script", "Select", 
                      "Small", "Strike", "Strong", "Sub", "Sup", "Tbody", 
                      "Td", "Template", "Textarea", "Tfoot", "Th", "Thead", 
                      "Title", "Tr", "Tt", "U", "Ul", "Var", "Article", 
                      "Aside", "Audio", "Bdi", "Canvas", "Command", "Datalist", 
                      "Details", "Embed", "Figcaption", "Figure", "Footer", 
                      "Hgroup", "Keygen", "Main", "Meter", "Output", "Progress", 
                      "Progress_bar_stripes", "Rp", "Rt", "Section", "Summary", 
                      "Svg", "Track", "Video", "Wbr" ]

    RULE_stylesheet = 0
    RULE_block = 1
    RULE_nestedBlock = 2
    RULE_selector = 3
    RULE_pseudoClass = 4
    RULE_pseudoElement = 5
    RULE_doubleColon = 6
    RULE_idSelector = 7
    RULE_classSelector = 8
    RULE_tagSelector = 9
    RULE_identifier = 10
    RULE_declaration = 11
    RULE_propertyValue = 12
    RULE_numValue = 13
    RULE_fourNumValue = 14
    RULE_threeNumValue = 15
    RULE_twoNumValue = 16
    RULE_oneNumValue = 17
    RULE_whiteSpaceWithSpaceChar = 18
    RULE_absLengthValue = 19
    RULE_fontRelativeValue = 20
    RULE_viewportRelativeValue = 21
    RULE_angleValue = 22
    RULE_resolutionValue = 23
    RULE_freqValue = 24
    RULE_timeValue = 25
    RULE_percentageValue = 26
    RULE_property = 27
    RULE_backgroundOptions = 28
    RULE_alignmentOptions = 29
    RULE_animationOptions = 30
    RULE_bookmarkOptions = 31
    RULE_borderOptions = 32
    RULE_borderBottomTopOptions = 33
    RULE_borderRightLeftOptions = 34
    RULE_borderImageOptions = 35
    RULE_boxOptions = 36
    RULE_captionOptions = 37
    RULE_colorOptions = 38
    RULE_columnOptions = 39
    RULE_columnRuleOptions = 40
    RULE_counterOptions = 41
    RULE_cueOptions = 42
    RULE_fontOptions = 43
    RULE_floatOptions = 44
    RULE_gridOptions = 45
    RULE_hyphenateOptions = 46
    RULE_imageOptions = 47
    RULE_listOptions = 48
    RULE_marginOptions = 49
    RULE_markOptions = 50
    RULE_marqueeOptions = 51
    RULE_minMaxOptions = 52
    RULE_minMaxDeviceOptions = 53
    RULE_navOptions = 54
    RULE_deviceOptions = 55
    RULE_dropOptions = 56
    RULE_dropOptionsBeforeAfter = 57
    RULE_fitOptions = 58
    RULE_outlineOptions = 59
    RULE_overflowOptions = 60
    RULE_paddingOptions = 61
    RULE_pageOptions = 62
    RULE_pageBreakOptions = 63
    RULE_pauseOptions = 64
    RULE_restOptions = 65
    RULE_rubyOptions = 66
    RULE_speakOptions = 67
    RULE_targetOptions = 68
    RULE_textOptions = 69
    RULE_transformOptions = 70
    RULE_transitionOptions = 71
    RULE_voiceOptions = 72
    RULE_voicePitchOptions = 73
    RULE_wordOptions = 74

    ruleNames =  [ "stylesheet", "block", "nestedBlock", "selector", "pseudoClass", 
                   "pseudoElement", "doubleColon", "idSelector", "classSelector", 
                   "tagSelector", "identifier", "declaration", "propertyValue", 
                   "numValue", "fourNumValue", "threeNumValue", "twoNumValue", 
                   "oneNumValue", "whiteSpaceWithSpaceChar", "absLengthValue", 
                   "fontRelativeValue", "viewportRelativeValue", "angleValue", 
                   "resolutionValue", "freqValue", "timeValue", "percentageValue", 
                   "property", "backgroundOptions", "alignmentOptions", 
                   "animationOptions", "bookmarkOptions", "borderOptions", 
                   "borderBottomTopOptions", "borderRightLeftOptions", "borderImageOptions", 
                   "boxOptions", "captionOptions", "colorOptions", "columnOptions", 
                   "columnRuleOptions", "counterOptions", "cueOptions", 
                   "fontOptions", "floatOptions", "gridOptions", "hyphenateOptions", 
                   "imageOptions", "listOptions", "marginOptions", "markOptions", 
                   "marqueeOptions", "minMaxOptions", "minMaxDeviceOptions", 
                   "navOptions", "deviceOptions", "dropOptions", "dropOptionsBeforeAfter", 
                   "fitOptions", "outlineOptions", "overflowOptions", "paddingOptions", 
                   "pageOptions", "pageBreakOptions", "pauseOptions", "restOptions", 
                   "rubyOptions", "speakOptions", "targetOptions", "textOptions", 
                   "transformOptions", "transitionOptions", "voiceOptions", 
                   "voicePitchOptions", "wordOptions" ]

    EOF = Token.EOF
    AbsLength=1
    FontRelative=2
    ViewportRelative=3
    Angle=4
    Resolution=5
    Freq=6
    Time=7
    Percentage=8
    Dot=9
    Colon=10
    Semi=11
    Lparen=12
    Rparen=13
    BlockStart=14
    BlockEnd=15
    Underscore=16
    Minus=17
    Not=18
    Hash=19
    To=20
    NumberReg=21
    Char=22
    Digit=23
    WhiteSpace=24
    SpaceChar=25
    Background=26
    Border=27
    List=28
    Font=29
    Margin=30
    Outline=31
    Padding=32
    Text=33
    Page=34
    Speak=35
    Break=36
    Max=37
    Min=38
    Pause=39
    Height=40
    Width=41
    Left=42
    Top=43
    Right=44
    Bottom=45
    Color=46
    Style=47
    Content=48
    Azimuth=49
    Attachment=50
    Image=51
    Position=52
    After=53
    Before=54
    Overflow=55
    Repeat=56
    Collapse=57
    Spacing=58
    Caption=59
    Counter=60
    Side=61
    Increment=62
    Clear=63
    Clip=64
    Reset=65
    Cue=66
    Cursor=67
    Direction=68
    Display=69
    Elevation=70
    Empty=71
    Cells=72
    Float=73
    Family=74
    Size=75
    Variant=76
    Inside=77
    Weight=78
    Letter=79
    Line=80
    Type=81
    Pitch=82
    Orphans=83
    Range=84
    Play=85
    During=86
    Richness=87
    Header=88
    Numeral=89
    Punctuation=90
    Quotes=91
    Speech=92
    Rate=93
    Stress=94
    Table=95
    Layout=96
    Align=97
    Decoration=98
    Indent=99
    Transform=100
    Unicode=101
    Bidi=102
    Vertical=103
    Visibility=104
    Voice=105
    Volume=106
    White=107
    Space=108
    Widows=109
    Word=110
    Z=111
    Index=112
    Alignment=113
    Animation=114
    Appearance=115
    Backface=116
    Baseline=117
    Bookmark=118
    Box=119
    Column=120
    Columns=121
    Crop=122
    Dominant=123
    Drop=124
    Fit=125
    Grid=126
    Hanging=127
    Hyphenate=128
    Hyphens=129
    Icon=130
    Inline=131
    Mark=132
    Marks=133
    Marquee=134
    Move=135
    Nav=136
    Opacity=137
    Perspective=138
    Phonemes=139
    Rendering=140
    Resize=141
    Rest=142
    Rotation=143
    Ruby=144
    String=145
    Target=146
    Adjust=147
    Delay=148
    Duration=149
    Name=150
    Origin=151
    Shift=152
    Label=153
    Level=154
    Radius=155
    Flex=156
    Lines=157
    Orient=158
    Pack=159
    Shadow=160
    Sizing=161
    Profile=162
    Count=163
    Fill=164
    Gap=165
    Rule=166
    Span=167
    Offset=168
    Stretch=169
    Rows=170
    Character=171
    Resource=172
    Orientation=173
    Stacking=174
    Speed=175
    Down=176
    Up=177
    X=178
    Y=179
    Policy=180
    Trim=181
    Intent=182
    Point=183
    Overhang=184
    Set=185
    New=186
    Justify=187
    Wrap=188
    Property=189
    Balance=190
    State=191
    Function=192
    Outset=193
    Slice=194
    Source=195
    Group=196
    Value=197
    Strategy=198
    Last=199
    Monochrome=200
    Scan=201
    Ratio=202
    Aspect=203
    Iteration=204
    Timing=205
    Device=206
    Skretch=207
    Ordinal=208
    Initial=209
    Transition=210
    First=211
    Selection=212
    Placeholder=213
    Hover=214
    Active=215
    Focus=216
    Visited=217
    Child=218
    Nth=219
    Disabled=220
    Checked=221
    Required=222
    A=223
    Abbr=224
    Acronym=225
    Address=226
    Applet=227
    Area=228
    B=229
    Base=230
    Basefont=231
    Bdo=232
    Big=233
    Blockquote=234
    Body=235
    Br=236
    Button=237
    Center=238
    Cite=239
    Code=240
    Col=241
    Colgroup=242
    Dd=243
    Del=244
    Dfn=245
    Dir=246
    Div=247
    Dl=248
    Dt=249
    Em=250
    Fieldset=251
    Form=252
    Frame=253
    Frameset=254
    H1=255
    H2=256
    H3=257
    H4=258
    H5=259
    H6=260
    Head=261
    Hr=262
    Html=263
    I=264
    Iframe=265
    Img=266
    Input=267
    Ins=268
    Kbd=269
    Legend=270
    Li=271
    Map=272
    Menu=273
    Meta=274
    Noframes=275
    Noscript=276
    Object=277
    Ol=278
    Optgroup=279
    Option=280
    P=281
    Param=282
    Pre=283
    Q=284
    S=285
    Samp=286
    Script=287
    Select=288
    Small=289
    Strike=290
    Strong=291
    Sub=292
    Sup=293
    Tbody=294
    Td=295
    Template=296
    Textarea=297
    Tfoot=298
    Th=299
    Thead=300
    Title=301
    Tr=302
    Tt=303
    U=304
    Ul=305
    Var=306
    Article=307
    Aside=308
    Audio=309
    Bdi=310
    Canvas=311
    Command=312
    Datalist=313
    Details=314
    Embed=315
    Figcaption=316
    Figure=317
    Footer=318
    Hgroup=319
    Keygen=320
    Main=321
    Meter=322
    Output=323
    Progress=324
    Progress_bar_stripes=325
    Rp=326
    Rt=327
    Section=328
    Summary=329
    Svg=330
    Track=331
    Video=332
    Wbr=333

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StylesheetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SCSSParser.EOF, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.BlockContext)
            else:
                return self.getTypedRuleContext(SCSSParser.BlockContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_stylesheet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStylesheet" ):
                listener.enterStylesheet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStylesheet" ):
                listener.exitStylesheet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStylesheet" ):
                return visitor.visitStylesheet(self)
            else:
                return visitor.visitChildren(self)




    def stylesheet(self):

        localctx = SCSSParser.StylesheetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_stylesheet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 576601490345951872) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 72356661200683137) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 4398046527489) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & -1) != 0) or ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 140737488355327) != 0):
                self.state = 150
                self.block()
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 156
            self.match(SCSSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(SCSSParser.SelectorContext,0)


        def BlockStart(self):
            return self.getToken(SCSSParser.BlockStart, 0)

        def BlockEnd(self):
            return self.getToken(SCSSParser.BlockEnd, 0)

        def WhiteSpace(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.WhiteSpace)
            else:
                return self.getToken(SCSSParser.WhiteSpace, i)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(SCSSParser.DeclarationContext,i)


        def nestedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.NestedBlockContext)
            else:
                return self.getTypedRuleContext(SCSSParser.NestedBlockContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SCSSParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 158
                self.match(SCSSParser.WhiteSpace)
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.selector()
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 165
                self.match(SCSSParser.WhiteSpace)
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self.match(SCSSParser.BlockStart)
            self.state = 188
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 186
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        self.state = 173
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==24:
                            self.state = 172
                            self.match(SCSSParser.WhiteSpace)


                        self.state = 175
                        self.declaration()
                        self.state = 177
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                        if la_ == 1:
                            self.state = 176
                            self.match(SCSSParser.WhiteSpace)


                        pass

                    elif la_ == 2:
                        self.state = 180
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                        if la_ == 1:
                            self.state = 179
                            self.match(SCSSParser.WhiteSpace)


                        self.state = 182
                        self.nestedBlock()
                        self.state = 184
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                        if la_ == 1:
                            self.state = 183
                            self.match(SCSSParser.WhiteSpace)


                        pass

             
                self.state = 190
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 191
                self.match(SCSSParser.WhiteSpace)
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 197
            self.match(SCSSParser.BlockEnd)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(SCSSParser.SelectorContext,0)


        def BlockStart(self):
            return self.getToken(SCSSParser.BlockStart, 0)

        def BlockEnd(self):
            return self.getToken(SCSSParser.BlockEnd, 0)

        def WhiteSpace(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.WhiteSpace)
            else:
                return self.getToken(SCSSParser.WhiteSpace, i)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(SCSSParser.DeclarationContext,i)


        def nestedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.NestedBlockContext)
            else:
                return self.getTypedRuleContext(SCSSParser.NestedBlockContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_nestedBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedBlock" ):
                listener.enterNestedBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedBlock" ):
                listener.exitNestedBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedBlock" ):
                return visitor.visitNestedBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedBlock(self):

        localctx = SCSSParser.NestedBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nestedBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 199
                self.match(SCSSParser.WhiteSpace)
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 205
            self.selector()
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 206
                self.match(SCSSParser.WhiteSpace)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 212
            self.match(SCSSParser.BlockStart)
            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 214
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==24:
                            self.state = 213
                            self.match(SCSSParser.WhiteSpace)


                        self.state = 216
                        self.declaration()
                        self.state = 218
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                        if la_ == 1:
                            self.state = 217
                            self.match(SCSSParser.WhiteSpace)


                        pass

                    elif la_ == 2:
                        self.state = 221
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                        if la_ == 1:
                            self.state = 220
                            self.match(SCSSParser.WhiteSpace)


                        self.state = 223
                        self.nestedBlock()
                        self.state = 225
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                        if la_ == 1:
                            self.state = 224
                            self.match(SCSSParser.WhiteSpace)


                        pass

             
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 232
                self.match(SCSSParser.WhiteSpace)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self.match(SCSSParser.BlockEnd)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.IdSelectorContext)
            else:
                return self.getTypedRuleContext(SCSSParser.IdSelectorContext,i)


        def classSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ClassSelectorContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ClassSelectorContext,i)


        def tagSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.TagSelectorContext)
            else:
                return self.getTypedRuleContext(SCSSParser.TagSelectorContext,i)


        def pseudoClass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.PseudoClassContext)
            else:
                return self.getTypedRuleContext(SCSSParser.PseudoClassContext,i)


        def pseudoElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.PseudoElementContext)
            else:
                return self.getTypedRuleContext(SCSSParser.PseudoElementContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelector" ):
                return visitor.visitSelector(self)
            else:
                return visitor.visitChildren(self)




    def selector(self):

        localctx = SCSSParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19]:
                    self.state = 240
                    self.idSelector()
                    pass
                elif token in [9]:
                    self.state = 241
                    self.classSelector()
                    pass
                elif token in [7, 29, 47, 59, 88, 95, 132, 136, 144, 153, 167, 195, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333]:
                    self.state = 242
                    self.tagSelector()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 245 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 576601490329174656) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 72356661200683137) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 4398046527489) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & -1) != 0) or ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 140737488355327) != 0)):
                    break

            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 247
                    self.pseudoClass()
                    pass

                elif la_ == 2:
                    self.state = 248
                    self.pseudoElement()
                    pass


                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(SCSSParser.Colon, 0)

        def Hover(self):
            return self.getToken(SCSSParser.Hover, 0)

        def Active(self):
            return self.getToken(SCSSParser.Active, 0)

        def Focus(self):
            return self.getToken(SCSSParser.Focus, 0)

        def Visited(self):
            return self.getToken(SCSSParser.Visited, 0)

        def First(self):
            return self.getToken(SCSSParser.First, 0)

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Child(self):
            return self.getToken(SCSSParser.Child, 0)

        def Last(self):
            return self.getToken(SCSSParser.Last, 0)

        def Nth(self):
            return self.getToken(SCSSParser.Nth, 0)

        def Lparen(self):
            return self.getToken(SCSSParser.Lparen, 0)

        def Digit(self):
            return self.getToken(SCSSParser.Digit, 0)

        def Rparen(self):
            return self.getToken(SCSSParser.Rparen, 0)

        def Not(self):
            return self.getToken(SCSSParser.Not, 0)

        def Disabled(self):
            return self.getToken(SCSSParser.Disabled, 0)

        def Checked(self):
            return self.getToken(SCSSParser.Checked, 0)

        def Required(self):
            return self.getToken(SCSSParser.Required, 0)

        def Empty(self):
            return self.getToken(SCSSParser.Empty, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_pseudoClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoClass" ):
                listener.enterPseudoClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoClass" ):
                listener.exitPseudoClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudoClass" ):
                return visitor.visitPseudoClass(self)
            else:
                return visitor.visitChildren(self)




    def pseudoClass(self):

        localctx = SCSSParser.PseudoClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_pseudoClass)
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(SCSSParser.Colon)
                self.state = 255
                self.match(SCSSParser.Hover)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(SCSSParser.Colon)
                self.state = 257
                self.match(SCSSParser.Active)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 258
                self.match(SCSSParser.Colon)
                self.state = 259
                self.match(SCSSParser.Focus)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 260
                self.match(SCSSParser.Colon)
                self.state = 261
                self.match(SCSSParser.Visited)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.match(SCSSParser.Colon)
                self.state = 263
                self.match(SCSSParser.First)
                self.state = 264
                self.match(SCSSParser.Minus)
                self.state = 265
                self.match(SCSSParser.Child)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 266
                self.match(SCSSParser.Colon)
                self.state = 267
                self.match(SCSSParser.Last)
                self.state = 268
                self.match(SCSSParser.Minus)
                self.state = 269
                self.match(SCSSParser.Child)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 270
                self.match(SCSSParser.Colon)
                self.state = 271
                self.match(SCSSParser.Nth)
                self.state = 272
                self.match(SCSSParser.Minus)
                self.state = 273
                self.match(SCSSParser.Child)
                self.state = 274
                self.match(SCSSParser.Lparen)
                self.state = 275
                self.match(SCSSParser.Digit)
                self.state = 276
                self.match(SCSSParser.Rparen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 277
                self.match(SCSSParser.Colon)
                self.state = 278
                self.match(SCSSParser.Not)
                self.state = 279
                self.match(SCSSParser.Lparen)
                self.state = 280
                self.match(SCSSParser.Rparen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 281
                self.match(SCSSParser.Colon)
                self.state = 282
                self.match(SCSSParser.Disabled)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 283
                self.match(SCSSParser.Colon)
                self.state = 284
                self.match(SCSSParser.Checked)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 285
                self.match(SCSSParser.Colon)
                self.state = 286
                self.match(SCSSParser.Required)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 287
                self.match(SCSSParser.Colon)
                self.state = 288
                self.match(SCSSParser.Empty)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doubleColon(self):
            return self.getTypedRuleContext(SCSSParser.DoubleColonContext,0)


        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def First(self):
            return self.getToken(SCSSParser.First, 0)

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Letter(self):
            return self.getToken(SCSSParser.Letter, 0)

        def Line(self):
            return self.getToken(SCSSParser.Line, 0)

        def Selection(self):
            return self.getToken(SCSSParser.Selection, 0)

        def Placeholder(self):
            return self.getToken(SCSSParser.Placeholder, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_pseudoElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoElement" ):
                listener.enterPseudoElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoElement" ):
                listener.exitPseudoElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudoElement" ):
                return visitor.visitPseudoElement(self)
            else:
                return visitor.visitChildren(self)




    def pseudoElement(self):

        localctx = SCSSParser.PseudoElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_pseudoElement)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.doubleColon()
                self.state = 292
                self.match(SCSSParser.After)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 294
                self.doubleColon()
                self.state = 295
                self.match(SCSSParser.Before)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.doubleColon()
                self.state = 298
                self.match(SCSSParser.First)
                self.state = 299
                self.match(SCSSParser.Minus)
                self.state = 300
                self.match(SCSSParser.Letter)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 302
                self.doubleColon()
                self.state = 303
                self.match(SCSSParser.First)
                self.state = 304
                self.match(SCSSParser.Minus)
                self.state = 305
                self.match(SCSSParser.Line)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 307
                self.doubleColon()
                self.state = 308
                self.match(SCSSParser.Selection)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 310
                self.doubleColon()
                self.state = 311
                self.match(SCSSParser.Placeholder)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoubleColonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(SCSSParser.Colon, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_doubleColon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleColon" ):
                listener.enterDoubleColon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleColon" ):
                listener.exitDoubleColon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleColon" ):
                return visitor.visitDoubleColon(self)
            else:
                return visitor.visitChildren(self)




    def doubleColon(self):

        localctx = SCSSParser.DoubleColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_doubleColon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(SCSSParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hash(self):
            return self.getToken(SCSSParser.Hash, 0)

        def identifier(self):
            return self.getTypedRuleContext(SCSSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_idSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdSelector" ):
                listener.enterIdSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdSelector" ):
                listener.exitIdSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdSelector" ):
                return visitor.visitIdSelector(self)
            else:
                return visitor.visitChildren(self)




    def idSelector(self):

        localctx = SCSSParser.IdSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_idSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(SCSSParser.Hash)
            self.state = 318
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(SCSSParser.Dot, 0)

        def identifier(self):
            return self.getTypedRuleContext(SCSSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_classSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassSelector" ):
                listener.enterClassSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassSelector" ):
                listener.exitClassSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassSelector" ):
                return visitor.visitClassSelector(self)
            else:
                return visitor.visitChildren(self)




    def classSelector(self):

        localctx = SCSSParser.ClassSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(SCSSParser.Dot)
            self.state = 321
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def A(self):
            return self.getToken(SCSSParser.A, 0)

        def Abbr(self):
            return self.getToken(SCSSParser.Abbr, 0)

        def Acronym(self):
            return self.getToken(SCSSParser.Acronym, 0)

        def Address(self):
            return self.getToken(SCSSParser.Address, 0)

        def Applet(self):
            return self.getToken(SCSSParser.Applet, 0)

        def Area(self):
            return self.getToken(SCSSParser.Area, 0)

        def B(self):
            return self.getToken(SCSSParser.B, 0)

        def Base(self):
            return self.getToken(SCSSParser.Base, 0)

        def Basefont(self):
            return self.getToken(SCSSParser.Basefont, 0)

        def Bdo(self):
            return self.getToken(SCSSParser.Bdo, 0)

        def Big(self):
            return self.getToken(SCSSParser.Big, 0)

        def Blockquote(self):
            return self.getToken(SCSSParser.Blockquote, 0)

        def Body(self):
            return self.getToken(SCSSParser.Body, 0)

        def Br(self):
            return self.getToken(SCSSParser.Br, 0)

        def Button(self):
            return self.getToken(SCSSParser.Button, 0)

        def Caption(self):
            return self.getToken(SCSSParser.Caption, 0)

        def Center(self):
            return self.getToken(SCSSParser.Center, 0)

        def Cite(self):
            return self.getToken(SCSSParser.Cite, 0)

        def Code(self):
            return self.getToken(SCSSParser.Code, 0)

        def Col(self):
            return self.getToken(SCSSParser.Col, 0)

        def Colgroup(self):
            return self.getToken(SCSSParser.Colgroup, 0)

        def Dd(self):
            return self.getToken(SCSSParser.Dd, 0)

        def Del(self):
            return self.getToken(SCSSParser.Del, 0)

        def Dfn(self):
            return self.getToken(SCSSParser.Dfn, 0)

        def Dir(self):
            return self.getToken(SCSSParser.Dir, 0)

        def Div(self):
            return self.getToken(SCSSParser.Div, 0)

        def Dl(self):
            return self.getToken(SCSSParser.Dl, 0)

        def Dt(self):
            return self.getToken(SCSSParser.Dt, 0)

        def Em(self):
            return self.getToken(SCSSParser.Em, 0)

        def Fieldset(self):
            return self.getToken(SCSSParser.Fieldset, 0)

        def Font(self):
            return self.getToken(SCSSParser.Font, 0)

        def Form(self):
            return self.getToken(SCSSParser.Form, 0)

        def Frame(self):
            return self.getToken(SCSSParser.Frame, 0)

        def Frameset(self):
            return self.getToken(SCSSParser.Frameset, 0)

        def H1(self):
            return self.getToken(SCSSParser.H1, 0)

        def H2(self):
            return self.getToken(SCSSParser.H2, 0)

        def H3(self):
            return self.getToken(SCSSParser.H3, 0)

        def H4(self):
            return self.getToken(SCSSParser.H4, 0)

        def H5(self):
            return self.getToken(SCSSParser.H5, 0)

        def H6(self):
            return self.getToken(SCSSParser.H6, 0)

        def Head(self):
            return self.getToken(SCSSParser.Head, 0)

        def Hr(self):
            return self.getToken(SCSSParser.Hr, 0)

        def Html(self):
            return self.getToken(SCSSParser.Html, 0)

        def I(self):
            return self.getToken(SCSSParser.I, 0)

        def Iframe(self):
            return self.getToken(SCSSParser.Iframe, 0)

        def Img(self):
            return self.getToken(SCSSParser.Img, 0)

        def Input(self):
            return self.getToken(SCSSParser.Input, 0)

        def Ins(self):
            return self.getToken(SCSSParser.Ins, 0)

        def Kbd(self):
            return self.getToken(SCSSParser.Kbd, 0)

        def Label(self):
            return self.getToken(SCSSParser.Label, 0)

        def Legend(self):
            return self.getToken(SCSSParser.Legend, 0)

        def Li(self):
            return self.getToken(SCSSParser.Li, 0)

        def Map(self):
            return self.getToken(SCSSParser.Map, 0)

        def Mark(self):
            return self.getToken(SCSSParser.Mark, 0)

        def Menu(self):
            return self.getToken(SCSSParser.Menu, 0)

        def Meta(self):
            return self.getToken(SCSSParser.Meta, 0)

        def Noframes(self):
            return self.getToken(SCSSParser.Noframes, 0)

        def Noscript(self):
            return self.getToken(SCSSParser.Noscript, 0)

        def Object(self):
            return self.getToken(SCSSParser.Object, 0)

        def Ol(self):
            return self.getToken(SCSSParser.Ol, 0)

        def Optgroup(self):
            return self.getToken(SCSSParser.Optgroup, 0)

        def Option(self):
            return self.getToken(SCSSParser.Option, 0)

        def P(self):
            return self.getToken(SCSSParser.P, 0)

        def Param(self):
            return self.getToken(SCSSParser.Param, 0)

        def Pre(self):
            return self.getToken(SCSSParser.Pre, 0)

        def Q(self):
            return self.getToken(SCSSParser.Q, 0)

        def S(self):
            return self.getToken(SCSSParser.S, 0)

        def Samp(self):
            return self.getToken(SCSSParser.Samp, 0)

        def Script(self):
            return self.getToken(SCSSParser.Script, 0)

        def Select(self):
            return self.getToken(SCSSParser.Select, 0)

        def Small(self):
            return self.getToken(SCSSParser.Small, 0)

        def Span(self):
            return self.getToken(SCSSParser.Span, 0)

        def Strike(self):
            return self.getToken(SCSSParser.Strike, 0)

        def Strong(self):
            return self.getToken(SCSSParser.Strong, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Sub(self):
            return self.getToken(SCSSParser.Sub, 0)

        def Sup(self):
            return self.getToken(SCSSParser.Sup, 0)

        def Table(self):
            return self.getToken(SCSSParser.Table, 0)

        def Tbody(self):
            return self.getToken(SCSSParser.Tbody, 0)

        def Td(self):
            return self.getToken(SCSSParser.Td, 0)

        def Template(self):
            return self.getToken(SCSSParser.Template, 0)

        def Textarea(self):
            return self.getToken(SCSSParser.Textarea, 0)

        def Tfoot(self):
            return self.getToken(SCSSParser.Tfoot, 0)

        def Th(self):
            return self.getToken(SCSSParser.Th, 0)

        def Thead(self):
            return self.getToken(SCSSParser.Thead, 0)

        def Title(self):
            return self.getToken(SCSSParser.Title, 0)

        def Tr(self):
            return self.getToken(SCSSParser.Tr, 0)

        def Tt(self):
            return self.getToken(SCSSParser.Tt, 0)

        def U(self):
            return self.getToken(SCSSParser.U, 0)

        def Ul(self):
            return self.getToken(SCSSParser.Ul, 0)

        def Var(self):
            return self.getToken(SCSSParser.Var, 0)

        def Article(self):
            return self.getToken(SCSSParser.Article, 0)

        def Aside(self):
            return self.getToken(SCSSParser.Aside, 0)

        def Audio(self):
            return self.getToken(SCSSParser.Audio, 0)

        def Bdi(self):
            return self.getToken(SCSSParser.Bdi, 0)

        def Canvas(self):
            return self.getToken(SCSSParser.Canvas, 0)

        def Command(self):
            return self.getToken(SCSSParser.Command, 0)

        def Datalist(self):
            return self.getToken(SCSSParser.Datalist, 0)

        def Details(self):
            return self.getToken(SCSSParser.Details, 0)

        def Embed(self):
            return self.getToken(SCSSParser.Embed, 0)

        def Figcaption(self):
            return self.getToken(SCSSParser.Figcaption, 0)

        def Figure(self):
            return self.getToken(SCSSParser.Figure, 0)

        def Footer(self):
            return self.getToken(SCSSParser.Footer, 0)

        def Header(self):
            return self.getToken(SCSSParser.Header, 0)

        def Hgroup(self):
            return self.getToken(SCSSParser.Hgroup, 0)

        def Keygen(self):
            return self.getToken(SCSSParser.Keygen, 0)

        def Main(self):
            return self.getToken(SCSSParser.Main, 0)

        def Meter(self):
            return self.getToken(SCSSParser.Meter, 0)

        def Nav(self):
            return self.getToken(SCSSParser.Nav, 0)

        def Output(self):
            return self.getToken(SCSSParser.Output, 0)

        def Progress(self):
            return self.getToken(SCSSParser.Progress, 0)

        def Progress_bar_stripes(self):
            return self.getToken(SCSSParser.Progress_bar_stripes, 0)

        def Rp(self):
            return self.getToken(SCSSParser.Rp, 0)

        def Rt(self):
            return self.getToken(SCSSParser.Rt, 0)

        def Ruby(self):
            return self.getToken(SCSSParser.Ruby, 0)

        def Section(self):
            return self.getToken(SCSSParser.Section, 0)

        def Source(self):
            return self.getToken(SCSSParser.Source, 0)

        def Summary(self):
            return self.getToken(SCSSParser.Summary, 0)

        def Svg(self):
            return self.getToken(SCSSParser.Svg, 0)

        def Time(self):
            return self.getToken(SCSSParser.Time, 0)

        def Track(self):
            return self.getToken(SCSSParser.Track, 0)

        def Video(self):
            return self.getToken(SCSSParser.Video, 0)

        def Wbr(self):
            return self.getToken(SCSSParser.Wbr, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_tagSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagSelector" ):
                listener.enterTagSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagSelector" ):
                listener.exitTagSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagSelector" ):
                return visitor.visitTagSelector(self)
            else:
                return visitor.visitChildren(self)




    def tagSelector(self):

        localctx = SCSSParser.TagSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tagSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 576601490328649856) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 72356661200683137) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 4398046527489) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & -1) != 0) or ((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 140737488355327) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Char(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Char)
            else:
                return self.getToken(SCSSParser.Char, i)

        def Digit(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Digit)
            else:
                return self.getToken(SCSSParser.Digit, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Underscore(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Underscore)
            else:
                return self.getToken(SCSSParser.Underscore, i)

        def getRuleIndex(self):
            return SCSSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SCSSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 325
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12779520) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 12779520) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self):
            return self.getTypedRuleContext(SCSSParser.PropertyContext,0)


        def Colon(self):
            return self.getToken(SCSSParser.Colon, 0)

        def propertyValue(self):
            return self.getTypedRuleContext(SCSSParser.PropertyValueContext,0)


        def Semi(self):
            return self.getToken(SCSSParser.Semi, 0)

        def WhiteSpace(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.WhiteSpace)
            else:
                return self.getToken(SCSSParser.WhiteSpace, i)

        def getRuleIndex(self):
            return SCSSParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = SCSSParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.property_()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 331
                self.match(SCSSParser.WhiteSpace)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 337
            self.match(SCSSParser.Colon)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 338
                self.match(SCSSParser.WhiteSpace)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self.propertyValue()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 345
                self.match(SCSSParser.WhiteSpace)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(SCSSParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numValue(self):
            return self.getTypedRuleContext(SCSSParser.NumValueContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_propertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyValue" ):
                listener.enterPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyValue" ):
                listener.exitPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyValue" ):
                return visitor.visitPropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def propertyValue(self):

        localctx = SCSSParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_propertyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.numValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fourNumValue(self):
            return self.getTypedRuleContext(SCSSParser.FourNumValueContext,0)


        def threeNumValue(self):
            return self.getTypedRuleContext(SCSSParser.ThreeNumValueContext,0)


        def twoNumValue(self):
            return self.getTypedRuleContext(SCSSParser.TwoNumValueContext,0)


        def oneNumValue(self):
            return self.getTypedRuleContext(SCSSParser.OneNumValueContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_numValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumValue" ):
                listener.enterNumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumValue" ):
                listener.exitNumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumValue" ):
                return visitor.visitNumValue(self)
            else:
                return visitor.visitChildren(self)




    def numValue(self):

        localctx = SCSSParser.NumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_numValue)
        try:
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self.fourNumValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.threeNumValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.twoNumValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 358
                self.oneNumValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FourNumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absLengthValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AbsLengthValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AbsLengthValueContext,i)


        def whiteSpaceWithSpaceChar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.WhiteSpaceWithSpaceCharContext)
            else:
                return self.getTypedRuleContext(SCSSParser.WhiteSpaceWithSpaceCharContext,i)


        def fontRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FontRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FontRelativeValueContext,i)


        def viewportRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ViewportRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ViewportRelativeValueContext,i)


        def angleValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AngleValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AngleValueContext,i)


        def resolutionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ResolutionValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ResolutionValueContext,i)


        def freqValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FreqValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FreqValueContext,i)


        def timeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.TimeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.TimeValueContext,i)


        def percentageValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.PercentageValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.PercentageValueContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_fourNumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFourNumValue" ):
                listener.enterFourNumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFourNumValue" ):
                listener.exitFourNumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFourNumValue" ):
                return visitor.visitFourNumValue(self)
            else:
                return visitor.visitChildren(self)




    def fourNumValue(self):

        localctx = SCSSParser.FourNumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fourNumValue)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                self.absLengthValue()
                self.state = 362
                self.whiteSpaceWithSpaceChar()
                self.state = 363
                self.absLengthValue()
                self.state = 364
                self.whiteSpaceWithSpaceChar()
                self.state = 365
                self.absLengthValue()
                self.state = 366
                self.whiteSpaceWithSpaceChar()
                self.state = 367
                self.absLengthValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 369
                self.fontRelativeValue()
                self.state = 370
                self.whiteSpaceWithSpaceChar()
                self.state = 371
                self.fontRelativeValue()
                self.state = 372
                self.whiteSpaceWithSpaceChar()
                self.state = 373
                self.fontRelativeValue()
                self.state = 374
                self.whiteSpaceWithSpaceChar()
                self.state = 375
                self.fontRelativeValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.viewportRelativeValue()
                self.state = 378
                self.whiteSpaceWithSpaceChar()
                self.state = 379
                self.viewportRelativeValue()
                self.state = 380
                self.whiteSpaceWithSpaceChar()
                self.state = 381
                self.viewportRelativeValue()
                self.state = 382
                self.whiteSpaceWithSpaceChar()
                self.state = 383
                self.viewportRelativeValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 385
                self.angleValue()
                self.state = 386
                self.whiteSpaceWithSpaceChar()
                self.state = 387
                self.angleValue()
                self.state = 388
                self.whiteSpaceWithSpaceChar()
                self.state = 389
                self.angleValue()
                self.state = 390
                self.whiteSpaceWithSpaceChar()
                self.state = 391
                self.angleValue()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 393
                self.resolutionValue()
                self.state = 394
                self.whiteSpaceWithSpaceChar()
                self.state = 395
                self.resolutionValue()
                self.state = 396
                self.whiteSpaceWithSpaceChar()
                self.state = 397
                self.resolutionValue()
                self.state = 398
                self.whiteSpaceWithSpaceChar()
                self.state = 399
                self.resolutionValue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 401
                self.freqValue()
                self.state = 402
                self.whiteSpaceWithSpaceChar()
                self.state = 403
                self.freqValue()
                self.state = 404
                self.whiteSpaceWithSpaceChar()
                self.state = 405
                self.freqValue()
                self.state = 406
                self.whiteSpaceWithSpaceChar()
                self.state = 407
                self.freqValue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 409
                self.timeValue()
                self.state = 410
                self.whiteSpaceWithSpaceChar()
                self.state = 411
                self.timeValue()
                self.state = 412
                self.whiteSpaceWithSpaceChar()
                self.state = 413
                self.timeValue()
                self.state = 414
                self.whiteSpaceWithSpaceChar()
                self.state = 415
                self.timeValue()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 417
                self.percentageValue()
                self.state = 418
                self.whiteSpaceWithSpaceChar()
                self.state = 419
                self.percentageValue()
                self.state = 420
                self.whiteSpaceWithSpaceChar()
                self.state = 421
                self.percentageValue()
                self.state = 422
                self.whiteSpaceWithSpaceChar()
                self.state = 423
                self.percentageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreeNumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absLengthValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AbsLengthValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AbsLengthValueContext,i)


        def whiteSpaceWithSpaceChar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.WhiteSpaceWithSpaceCharContext)
            else:
                return self.getTypedRuleContext(SCSSParser.WhiteSpaceWithSpaceCharContext,i)


        def fontRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FontRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FontRelativeValueContext,i)


        def viewportRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ViewportRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ViewportRelativeValueContext,i)


        def angleValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AngleValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AngleValueContext,i)


        def resolutionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ResolutionValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ResolutionValueContext,i)


        def freqValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FreqValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FreqValueContext,i)


        def timeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.TimeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.TimeValueContext,i)


        def percentageValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.PercentageValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.PercentageValueContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_threeNumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreeNumValue" ):
                listener.enterThreeNumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreeNumValue" ):
                listener.exitThreeNumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreeNumValue" ):
                return visitor.visitThreeNumValue(self)
            else:
                return visitor.visitChildren(self)




    def threeNumValue(self):

        localctx = SCSSParser.ThreeNumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_threeNumValue)
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.absLengthValue()
                self.state = 428
                self.whiteSpaceWithSpaceChar()
                self.state = 429
                self.absLengthValue()
                self.state = 430
                self.whiteSpaceWithSpaceChar()
                self.state = 431
                self.absLengthValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.fontRelativeValue()
                self.state = 434
                self.whiteSpaceWithSpaceChar()
                self.state = 435
                self.fontRelativeValue()
                self.state = 436
                self.whiteSpaceWithSpaceChar()
                self.state = 437
                self.fontRelativeValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.viewportRelativeValue()
                self.state = 440
                self.whiteSpaceWithSpaceChar()
                self.state = 441
                self.viewportRelativeValue()
                self.state = 442
                self.whiteSpaceWithSpaceChar()
                self.state = 443
                self.viewportRelativeValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 445
                self.angleValue()
                self.state = 446
                self.whiteSpaceWithSpaceChar()
                self.state = 447
                self.angleValue()
                self.state = 448
                self.whiteSpaceWithSpaceChar()
                self.state = 449
                self.angleValue()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 451
                self.resolutionValue()
                self.state = 452
                self.whiteSpaceWithSpaceChar()
                self.state = 453
                self.resolutionValue()
                self.state = 454
                self.whiteSpaceWithSpaceChar()
                self.state = 455
                self.resolutionValue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 457
                self.freqValue()
                self.state = 458
                self.whiteSpaceWithSpaceChar()
                self.state = 459
                self.freqValue()
                self.state = 460
                self.whiteSpaceWithSpaceChar()
                self.state = 461
                self.freqValue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 463
                self.timeValue()
                self.state = 464
                self.whiteSpaceWithSpaceChar()
                self.state = 465
                self.timeValue()
                self.state = 466
                self.whiteSpaceWithSpaceChar()
                self.state = 467
                self.timeValue()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 469
                self.percentageValue()
                self.state = 470
                self.whiteSpaceWithSpaceChar()
                self.state = 471
                self.percentageValue()
                self.state = 472
                self.whiteSpaceWithSpaceChar()
                self.state = 473
                self.percentageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TwoNumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absLengthValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AbsLengthValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AbsLengthValueContext,i)


        def whiteSpaceWithSpaceChar(self):
            return self.getTypedRuleContext(SCSSParser.WhiteSpaceWithSpaceCharContext,0)


        def fontRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FontRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FontRelativeValueContext,i)


        def viewportRelativeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ViewportRelativeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ViewportRelativeValueContext,i)


        def angleValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.AngleValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.AngleValueContext,i)


        def resolutionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.ResolutionValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.ResolutionValueContext,i)


        def freqValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.FreqValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.FreqValueContext,i)


        def timeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.TimeValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.TimeValueContext,i)


        def percentageValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SCSSParser.PercentageValueContext)
            else:
                return self.getTypedRuleContext(SCSSParser.PercentageValueContext,i)


        def getRuleIndex(self):
            return SCSSParser.RULE_twoNumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTwoNumValue" ):
                listener.enterTwoNumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTwoNumValue" ):
                listener.exitTwoNumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTwoNumValue" ):
                return visitor.visitTwoNumValue(self)
            else:
                return visitor.visitChildren(self)




    def twoNumValue(self):

        localctx = SCSSParser.TwoNumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_twoNumValue)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.absLengthValue()
                self.state = 478
                self.whiteSpaceWithSpaceChar()
                self.state = 479
                self.absLengthValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.fontRelativeValue()
                self.state = 482
                self.whiteSpaceWithSpaceChar()
                self.state = 483
                self.fontRelativeValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 485
                self.viewportRelativeValue()
                self.state = 486
                self.whiteSpaceWithSpaceChar()
                self.state = 487
                self.viewportRelativeValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.angleValue()
                self.state = 490
                self.whiteSpaceWithSpaceChar()
                self.state = 491
                self.angleValue()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 493
                self.resolutionValue()
                self.state = 494
                self.whiteSpaceWithSpaceChar()
                self.state = 495
                self.resolutionValue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 497
                self.freqValue()
                self.state = 498
                self.whiteSpaceWithSpaceChar()
                self.state = 499
                self.freqValue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 501
                self.timeValue()
                self.state = 502
                self.whiteSpaceWithSpaceChar()
                self.state = 503
                self.timeValue()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 505
                self.percentageValue()
                self.state = 506
                self.whiteSpaceWithSpaceChar()
                self.state = 507
                self.percentageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneNumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absLengthValue(self):
            return self.getTypedRuleContext(SCSSParser.AbsLengthValueContext,0)


        def fontRelativeValue(self):
            return self.getTypedRuleContext(SCSSParser.FontRelativeValueContext,0)


        def viewportRelativeValue(self):
            return self.getTypedRuleContext(SCSSParser.ViewportRelativeValueContext,0)


        def angleValue(self):
            return self.getTypedRuleContext(SCSSParser.AngleValueContext,0)


        def resolutionValue(self):
            return self.getTypedRuleContext(SCSSParser.ResolutionValueContext,0)


        def freqValue(self):
            return self.getTypedRuleContext(SCSSParser.FreqValueContext,0)


        def timeValue(self):
            return self.getTypedRuleContext(SCSSParser.TimeValueContext,0)


        def percentageValue(self):
            return self.getTypedRuleContext(SCSSParser.PercentageValueContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_oneNumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneNumValue" ):
                listener.enterOneNumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneNumValue" ):
                listener.exitOneNumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneNumValue" ):
                return visitor.visitOneNumValue(self)
            else:
                return visitor.visitChildren(self)




    def oneNumValue(self):

        localctx = SCSSParser.OneNumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oneNumValue)
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.absLengthValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.fontRelativeValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.viewportRelativeValue()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 514
                self.angleValue()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 515
                self.resolutionValue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 516
                self.freqValue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 517
                self.timeValue()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 518
                self.percentageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhiteSpaceWithSpaceCharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SpaceChar(self):
            return self.getToken(SCSSParser.SpaceChar, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_whiteSpaceWithSpaceChar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhiteSpaceWithSpaceChar" ):
                listener.enterWhiteSpaceWithSpaceChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhiteSpaceWithSpaceChar" ):
                listener.exitWhiteSpaceWithSpaceChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhiteSpaceWithSpaceChar" ):
                return visitor.visitWhiteSpaceWithSpaceChar(self)
            else:
                return visitor.visitChildren(self)




    def whiteSpaceWithSpaceChar(self):

        localctx = SCSSParser.WhiteSpaceWithSpaceCharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whiteSpaceWithSpaceChar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(SCSSParser.SpaceChar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsLengthValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def AbsLength(self):
            return self.getToken(SCSSParser.AbsLength, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_absLengthValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbsLengthValue" ):
                listener.enterAbsLengthValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbsLengthValue" ):
                listener.exitAbsLengthValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbsLengthValue" ):
                return visitor.visitAbsLengthValue(self)
            else:
                return visitor.visitChildren(self)




    def absLengthValue(self):

        localctx = SCSSParser.AbsLengthValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_absLengthValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(SCSSParser.NumberReg)
            self.state = 524
            self.match(SCSSParser.AbsLength)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontRelativeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def FontRelative(self):
            return self.getToken(SCSSParser.FontRelative, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_fontRelativeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontRelativeValue" ):
                listener.enterFontRelativeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontRelativeValue" ):
                listener.exitFontRelativeValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontRelativeValue" ):
                return visitor.visitFontRelativeValue(self)
            else:
                return visitor.visitChildren(self)




    def fontRelativeValue(self):

        localctx = SCSSParser.FontRelativeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fontRelativeValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(SCSSParser.NumberReg)
            self.state = 527
            self.match(SCSSParser.FontRelative)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewportRelativeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def ViewportRelative(self):
            return self.getToken(SCSSParser.ViewportRelative, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_viewportRelativeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewportRelativeValue" ):
                listener.enterViewportRelativeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewportRelativeValue" ):
                listener.exitViewportRelativeValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViewportRelativeValue" ):
                return visitor.visitViewportRelativeValue(self)
            else:
                return visitor.visitChildren(self)




    def viewportRelativeValue(self):

        localctx = SCSSParser.ViewportRelativeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_viewportRelativeValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(SCSSParser.NumberReg)
            self.state = 530
            self.match(SCSSParser.ViewportRelative)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AngleValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def Angle(self):
            return self.getToken(SCSSParser.Angle, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_angleValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngleValue" ):
                listener.enterAngleValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngleValue" ):
                listener.exitAngleValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAngleValue" ):
                return visitor.visitAngleValue(self)
            else:
                return visitor.visitChildren(self)




    def angleValue(self):

        localctx = SCSSParser.AngleValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_angleValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(SCSSParser.NumberReg)
            self.state = 533
            self.match(SCSSParser.Angle)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResolutionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def Resolution(self):
            return self.getToken(SCSSParser.Resolution, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_resolutionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResolutionValue" ):
                listener.enterResolutionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResolutionValue" ):
                listener.exitResolutionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResolutionValue" ):
                return visitor.visitResolutionValue(self)
            else:
                return visitor.visitChildren(self)




    def resolutionValue(self):

        localctx = SCSSParser.ResolutionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_resolutionValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(SCSSParser.NumberReg)
            self.state = 536
            self.match(SCSSParser.Resolution)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FreqValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def Freq(self):
            return self.getToken(SCSSParser.Freq, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_freqValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreqValue" ):
                listener.enterFreqValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreqValue" ):
                listener.exitFreqValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreqValue" ):
                return visitor.visitFreqValue(self)
            else:
                return visitor.visitChildren(self)




    def freqValue(self):

        localctx = SCSSParser.FreqValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_freqValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(SCSSParser.NumberReg)
            self.state = 539
            self.match(SCSSParser.Freq)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def Time(self):
            return self.getToken(SCSSParser.Time, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_timeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeValue" ):
                listener.enterTimeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeValue" ):
                listener.exitTimeValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeValue" ):
                return visitor.visitTimeValue(self)
            else:
                return visitor.visitChildren(self)




    def timeValue(self):

        localctx = SCSSParser.TimeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_timeValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(SCSSParser.NumberReg)
            self.state = 542
            self.match(SCSSParser.Time)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PercentageValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NumberReg(self):
            return self.getToken(SCSSParser.NumberReg, 0)

        def Percentage(self):
            return self.getToken(SCSSParser.Percentage, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_percentageValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercentageValue" ):
                listener.enterPercentageValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercentageValue" ):
                listener.exitPercentageValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercentageValue" ):
                return visitor.visitPercentageValue(self)
            else:
                return visitor.visitChildren(self)




    def percentageValue(self):

        localctx = SCSSParser.PercentageValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_percentageValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(SCSSParser.NumberReg)
            self.state = 545
            self.match(SCSSParser.Percentage)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Appearance(self):
            return self.getToken(SCSSParser.Appearance, 0)

        def Azimuth(self):
            return self.getToken(SCSSParser.Azimuth, 0)

        def Bottom(self):
            return self.getToken(SCSSParser.Bottom, 0)

        def Clear(self):
            return self.getToken(SCSSParser.Clear, 0)

        def Clip(self):
            return self.getToken(SCSSParser.Clip, 0)

        def Columns(self):
            return self.getToken(SCSSParser.Columns, 0)

        def Content(self):
            return self.getToken(SCSSParser.Content, 0)

        def Crop(self):
            return self.getToken(SCSSParser.Crop, 0)

        def Cursor(self):
            return self.getToken(SCSSParser.Cursor, 0)

        def Direction(self):
            return self.getToken(SCSSParser.Direction, 0)

        def Display(self):
            return self.getToken(SCSSParser.Display, 0)

        def Elevation(self):
            return self.getToken(SCSSParser.Elevation, 0)

        def Height(self):
            return self.getToken(SCSSParser.Height, 0)

        def Hyphens(self):
            return self.getToken(SCSSParser.Hyphens, 0)

        def Icon(self):
            return self.getToken(SCSSParser.Icon, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Marks(self):
            return self.getToken(SCSSParser.Marks, 0)

        def Monochrome(self):
            return self.getToken(SCSSParser.Monochrome, 0)

        def Opacity(self):
            return self.getToken(SCSSParser.Opacity, 0)

        def Orientation(self):
            return self.getToken(SCSSParser.Orientation, 0)

        def Orphans(self):
            return self.getToken(SCSSParser.Orphans, 0)

        def Phonemes(self):
            return self.getToken(SCSSParser.Phonemes, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def Quotes(self):
            return self.getToken(SCSSParser.Quotes, 0)

        def Resize(self):
            return self.getToken(SCSSParser.Resize, 0)

        def Resolution(self):
            return self.getToken(SCSSParser.Resolution, 0)

        def Richness(self):
            return self.getToken(SCSSParser.Richness, 0)

        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def Scan(self):
            return self.getToken(SCSSParser.Scan, 0)

        def Size(self):
            return self.getToken(SCSSParser.Size, 0)

        def Stress(self):
            return self.getToken(SCSSParser.Stress, 0)

        def Top(self):
            return self.getToken(SCSSParser.Top, 0)

        def Visibility(self):
            return self.getToken(SCSSParser.Visibility, 0)

        def Volume(self):
            return self.getToken(SCSSParser.Volume, 0)

        def Widows(self):
            return self.getToken(SCSSParser.Widows, 0)

        def Baseline(self):
            return self.getToken(SCSSParser.Baseline, 0)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Shift(self):
            return self.getToken(SCSSParser.Shift, 0)

        def Aspect(self):
            return self.getToken(SCSSParser.Aspect, 0)

        def Ratio(self):
            return self.getToken(SCSSParser.Ratio, 0)

        def Backface(self):
            return self.getToken(SCSSParser.Backface, 0)

        def Caption(self):
            return self.getToken(SCSSParser.Caption, 0)

        def Side(self):
            return self.getToken(SCSSParser.Side, 0)

        def Dominant(self):
            return self.getToken(SCSSParser.Dominant, 0)

        def Empty(self):
            return self.getToken(SCSSParser.Empty, 0)

        def Cells(self):
            return self.getToken(SCSSParser.Cells, 0)

        def Letter(self):
            return self.getToken(SCSSParser.Letter, 0)

        def Spacing(self):
            return self.getToken(SCSSParser.Spacing, 0)

        def Move(self):
            return self.getToken(SCSSParser.Move, 0)

        def To(self):
            return self.getToken(SCSSParser.To, 0)

        def Play(self):
            return self.getToken(SCSSParser.Play, 0)

        def During(self):
            return self.getToken(SCSSParser.During, 0)

        def Perspective(self):
            return self.getToken(SCSSParser.Perspective, 0)

        def Origin(self):
            return self.getToken(SCSSParser.Origin, 0)

        def Punctuation(self):
            return self.getToken(SCSSParser.Punctuation, 0)

        def Trim(self):
            return self.getToken(SCSSParser.Trim, 0)

        def Rendering(self):
            return self.getToken(SCSSParser.Rendering, 0)

        def Intent(self):
            return self.getToken(SCSSParser.Intent, 0)

        def Speech(self):
            return self.getToken(SCSSParser.Speech, 0)

        def Rate(self):
            return self.getToken(SCSSParser.Rate, 0)

        def String(self):
            return self.getToken(SCSSParser.String, 0)

        def Set(self):
            return self.getToken(SCSSParser.Set, 0)

        def Unicode(self):
            return self.getToken(SCSSParser.Unicode, 0)

        def Bidi(self):
            return self.getToken(SCSSParser.Bidi, 0)

        def Vertical(self):
            return self.getToken(SCSSParser.Vertical, 0)

        def Align(self):
            return self.getToken(SCSSParser.Align, 0)

        def Inline(self):
            return self.getToken(SCSSParser.Inline, 0)

        def Box(self):
            return self.getToken(SCSSParser.Box, 0)

        def Background(self):
            return self.getToken(SCSSParser.Background, 0)

        def backgroundOptions(self):
            return self.getTypedRuleContext(SCSSParser.BackgroundOptionsContext,0)


        def Alignment(self):
            return self.getToken(SCSSParser.Alignment, 0)

        def alignmentOptions(self):
            return self.getTypedRuleContext(SCSSParser.AlignmentOptionsContext,0)


        def Animation(self):
            return self.getToken(SCSSParser.Animation, 0)

        def animationOptions(self):
            return self.getTypedRuleContext(SCSSParser.AnimationOptionsContext,0)


        def Bookmark(self):
            return self.getToken(SCSSParser.Bookmark, 0)

        def bookmarkOptions(self):
            return self.getTypedRuleContext(SCSSParser.BookmarkOptionsContext,0)


        def Border(self):
            return self.getToken(SCSSParser.Border, 0)

        def borderOptions(self):
            return self.getTypedRuleContext(SCSSParser.BorderOptionsContext,0)


        def boxOptions(self):
            return self.getTypedRuleContext(SCSSParser.BoxOptionsContext,0)


        def captionOptions(self):
            return self.getTypedRuleContext(SCSSParser.CaptionOptionsContext,0)


        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def colorOptions(self):
            return self.getTypedRuleContext(SCSSParser.ColorOptionsContext,0)


        def Column(self):
            return self.getToken(SCSSParser.Column, 0)

        def columnOptions(self):
            return self.getTypedRuleContext(SCSSParser.ColumnOptionsContext,0)


        def Counter(self):
            return self.getToken(SCSSParser.Counter, 0)

        def counterOptions(self):
            return self.getTypedRuleContext(SCSSParser.CounterOptionsContext,0)


        def Cue(self):
            return self.getToken(SCSSParser.Cue, 0)

        def cueOptions(self):
            return self.getTypedRuleContext(SCSSParser.CueOptionsContext,0)


        def Font(self):
            return self.getToken(SCSSParser.Font, 0)

        def fontOptions(self):
            return self.getTypedRuleContext(SCSSParser.FontOptionsContext,0)


        def Float(self):
            return self.getToken(SCSSParser.Float, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(SCSSParser.FloatOptionsContext,0)


        def Grid(self):
            return self.getToken(SCSSParser.Grid, 0)

        def gridOptions(self):
            return self.getTypedRuleContext(SCSSParser.GridOptionsContext,0)


        def Hyphenate(self):
            return self.getToken(SCSSParser.Hyphenate, 0)

        def hyphenateOptions(self):
            return self.getTypedRuleContext(SCSSParser.HyphenateOptionsContext,0)


        def Image(self):
            return self.getToken(SCSSParser.Image, 0)

        def imageOptions(self):
            return self.getTypedRuleContext(SCSSParser.ImageOptionsContext,0)


        def List(self):
            return self.getToken(SCSSParser.List, 0)

        def listOptions(self):
            return self.getTypedRuleContext(SCSSParser.ListOptionsContext,0)


        def Margin(self):
            return self.getToken(SCSSParser.Margin, 0)

        def marginOptions(self):
            return self.getTypedRuleContext(SCSSParser.MarginOptionsContext,0)


        def markOptions(self):
            return self.getTypedRuleContext(SCSSParser.MarkOptionsContext,0)


        def Marquee(self):
            return self.getToken(SCSSParser.Marquee, 0)

        def marqueeOptions(self):
            return self.getTypedRuleContext(SCSSParser.MarqueeOptionsContext,0)


        def Min(self):
            return self.getToken(SCSSParser.Min, 0)

        def minMaxOptions(self):
            return self.getTypedRuleContext(SCSSParser.MinMaxOptionsContext,0)


        def Max(self):
            return self.getToken(SCSSParser.Max, 0)

        def Nav(self):
            return self.getToken(SCSSParser.Nav, 0)

        def navOptions(self):
            return self.getTypedRuleContext(SCSSParser.NavOptionsContext,0)


        def Device(self):
            return self.getToken(SCSSParser.Device, 0)

        def deviceOptions(self):
            return self.getTypedRuleContext(SCSSParser.DeviceOptionsContext,0)


        def Drop(self):
            return self.getToken(SCSSParser.Drop, 0)

        def dropOptions(self):
            return self.getTypedRuleContext(SCSSParser.DropOptionsContext,0)


        def Fit(self):
            return self.getToken(SCSSParser.Fit, 0)

        def fitOptions(self):
            return self.getTypedRuleContext(SCSSParser.FitOptionsContext,0)


        def Outline(self):
            return self.getToken(SCSSParser.Outline, 0)

        def outlineOptions(self):
            return self.getTypedRuleContext(SCSSParser.OutlineOptionsContext,0)


        def Overflow(self):
            return self.getToken(SCSSParser.Overflow, 0)

        def overflowOptions(self):
            return self.getTypedRuleContext(SCSSParser.OverflowOptionsContext,0)


        def Padding(self):
            return self.getToken(SCSSParser.Padding, 0)

        def paddingOptions(self):
            return self.getTypedRuleContext(SCSSParser.PaddingOptionsContext,0)


        def Page(self):
            return self.getToken(SCSSParser.Page, 0)

        def pageOptions(self):
            return self.getTypedRuleContext(SCSSParser.PageOptionsContext,0)


        def Pause(self):
            return self.getToken(SCSSParser.Pause, 0)

        def pauseOptions(self):
            return self.getTypedRuleContext(SCSSParser.PauseOptionsContext,0)


        def Rest(self):
            return self.getToken(SCSSParser.Rest, 0)

        def restOptions(self):
            return self.getTypedRuleContext(SCSSParser.RestOptionsContext,0)


        def Ruby(self):
            return self.getToken(SCSSParser.Ruby, 0)

        def rubyOptions(self):
            return self.getTypedRuleContext(SCSSParser.RubyOptionsContext,0)


        def Speak(self):
            return self.getToken(SCSSParser.Speak, 0)

        def speakOptions(self):
            return self.getTypedRuleContext(SCSSParser.SpeakOptionsContext,0)


        def Target(self):
            return self.getToken(SCSSParser.Target, 0)

        def targetOptions(self):
            return self.getTypedRuleContext(SCSSParser.TargetOptionsContext,0)


        def Transform(self):
            return self.getToken(SCSSParser.Transform, 0)

        def transformOptions(self):
            return self.getTypedRuleContext(SCSSParser.TransformOptionsContext,0)


        def Transition(self):
            return self.getToken(SCSSParser.Transition, 0)

        def transitionOptions(self):
            return self.getTypedRuleContext(SCSSParser.TransitionOptionsContext,0)


        def Text(self):
            return self.getToken(SCSSParser.Text, 0)

        def textOptions(self):
            return self.getTypedRuleContext(SCSSParser.TextOptionsContext,0)


        def Voice(self):
            return self.getToken(SCSSParser.Voice, 0)

        def voiceOptions(self):
            return self.getTypedRuleContext(SCSSParser.VoiceOptionsContext,0)


        def Word(self):
            return self.getToken(SCSSParser.Word, 0)

        def wordOptions(self):
            return self.getTypedRuleContext(SCSSParser.WordOptionsContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SCSSParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_property)
        self._la = 0 # Token type
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.match(SCSSParser.Appearance)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(SCSSParser.Azimuth)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 549
                self.match(SCSSParser.Bottom)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 550
                self.match(SCSSParser.Clear)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 551
                self.match(SCSSParser.Clip)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 552
                self.match(SCSSParser.Columns)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 553
                self.match(SCSSParser.Content)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 554
                self.match(SCSSParser.Crop)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 555
                self.match(SCSSParser.Cursor)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 556
                self.match(SCSSParser.Direction)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 557
                self.match(SCSSParser.Display)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 558
                self.match(SCSSParser.Elevation)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 559
                self.match(SCSSParser.Height)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 560
                self.match(SCSSParser.Hyphens)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 561
                self.match(SCSSParser.Icon)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 562
                self.match(SCSSParser.Left)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 563
                self.match(SCSSParser.Marks)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 564
                self.match(SCSSParser.Monochrome)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 565
                self.match(SCSSParser.Opacity)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 566
                self.match(SCSSParser.Orientation)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 567
                self.match(SCSSParser.Orphans)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 568
                self.match(SCSSParser.Phonemes)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 569
                self.match(SCSSParser.Position)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 570
                self.match(SCSSParser.Quotes)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 571
                self.match(SCSSParser.Resize)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 572
                self.match(SCSSParser.Resolution)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 573
                self.match(SCSSParser.Richness)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 574
                self.match(SCSSParser.Right)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 575
                self.match(SCSSParser.Scan)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 576
                self.match(SCSSParser.Size)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 577
                self.match(SCSSParser.Stress)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 578
                self.match(SCSSParser.Top)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 579
                self.match(SCSSParser.Visibility)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 580
                self.match(SCSSParser.Volume)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 581
                self.match(SCSSParser.Widows)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 582
                self.match(SCSSParser.Baseline)
                self.state = 583
                self.match(SCSSParser.Minus)
                self.state = 584
                self.match(SCSSParser.Shift)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 585
                self.match(SCSSParser.Aspect)
                self.state = 586
                self.match(SCSSParser.Minus)
                self.state = 587
                self.match(SCSSParser.Ratio)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 588
                self.match(SCSSParser.Backface)
                self.state = 589
                self.match(SCSSParser.Minus)
                self.state = 590
                self.match(SCSSParser.Visibility)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 591
                self.match(SCSSParser.Caption)
                self.state = 592
                self.match(SCSSParser.Minus)
                self.state = 593
                self.match(SCSSParser.Side)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 594
                self.match(SCSSParser.Dominant)
                self.state = 595
                self.match(SCSSParser.Minus)
                self.state = 596
                self.match(SCSSParser.Baseline)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 597
                self.match(SCSSParser.Empty)
                self.state = 598
                self.match(SCSSParser.Minus)
                self.state = 599
                self.match(SCSSParser.Cells)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 600
                self.match(SCSSParser.Letter)
                self.state = 601
                self.match(SCSSParser.Minus)
                self.state = 602
                self.match(SCSSParser.Spacing)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 603
                self.match(SCSSParser.Move)
                self.state = 604
                self.match(SCSSParser.Minus)
                self.state = 605
                self.match(SCSSParser.To)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 606
                self.match(SCSSParser.Play)
                self.state = 607
                self.match(SCSSParser.Minus)
                self.state = 608
                self.match(SCSSParser.During)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 609
                self.match(SCSSParser.Perspective)
                self.state = 610
                self.match(SCSSParser.Minus)
                self.state = 611
                self.match(SCSSParser.Origin)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 612
                self.match(SCSSParser.Punctuation)
                self.state = 613
                self.match(SCSSParser.Minus)
                self.state = 614
                self.match(SCSSParser.Trim)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 615
                self.match(SCSSParser.Rendering)
                self.state = 616
                self.match(SCSSParser.Minus)
                self.state = 617
                self.match(SCSSParser.Intent)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 618
                self.match(SCSSParser.Speech)
                self.state = 619
                self.match(SCSSParser.Minus)
                self.state = 620
                self.match(SCSSParser.Rate)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 621
                self.match(SCSSParser.String)
                self.state = 622
                self.match(SCSSParser.Minus)
                self.state = 623
                self.match(SCSSParser.Set)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 624
                self.match(SCSSParser.Unicode)
                self.state = 625
                self.match(SCSSParser.Minus)
                self.state = 626
                self.match(SCSSParser.Bidi)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 627
                self.match(SCSSParser.Vertical)
                self.state = 628
                self.match(SCSSParser.Minus)
                self.state = 629
                self.match(SCSSParser.Align)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 630
                self.match(SCSSParser.Inline)
                self.state = 631
                self.match(SCSSParser.Minus)
                self.state = 632
                self.match(SCSSParser.Box)
                self.state = 633
                self.match(SCSSParser.Minus)
                self.state = 634
                self.match(SCSSParser.Align)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 635
                self.match(SCSSParser.Background)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 636
                    self.backgroundOptions()


                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 639
                self.match(SCSSParser.Alignment)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 640
                    self.alignmentOptions()


                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 643
                self.match(SCSSParser.Animation)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 644
                    self.animationOptions()


                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 647
                self.match(SCSSParser.Bookmark)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 648
                    self.bookmarkOptions()


                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 651
                self.match(SCSSParser.Border)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 652
                    self.borderOptions()


                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 655
                self.match(SCSSParser.Box)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 656
                    self.boxOptions()


                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 659
                self.match(SCSSParser.Caption)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 660
                    self.captionOptions()


                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 663
                self.match(SCSSParser.Color)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 664
                    self.colorOptions()


                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 667
                self.match(SCSSParser.Column)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 668
                    self.columnOptions()


                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 671
                self.match(SCSSParser.Counter)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 672
                    self.counterOptions()


                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 675
                self.match(SCSSParser.Cue)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 676
                    self.cueOptions()


                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 679
                self.match(SCSSParser.Font)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 680
                    self.fontOptions()


                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 683
                self.match(SCSSParser.Float)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 684
                    self.floatOptions()


                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 687
                self.match(SCSSParser.Grid)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 688
                    self.gridOptions()


                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 691
                self.match(SCSSParser.Hyphenate)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 692
                    self.hyphenateOptions()


                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 695
                self.match(SCSSParser.Image)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 696
                    self.imageOptions()


                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 699
                self.match(SCSSParser.List)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 700
                    self.listOptions()


                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 703
                self.match(SCSSParser.Margin)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 704
                    self.marginOptions()


                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 707
                self.match(SCSSParser.Marks)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 708
                    self.markOptions()


                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 711
                self.match(SCSSParser.Marquee)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 712
                    self.marqueeOptions()


                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 715
                self.match(SCSSParser.Min)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 716
                    self.minMaxOptions()


                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 719
                self.match(SCSSParser.Max)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 720
                    self.minMaxOptions()


                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 723
                self.match(SCSSParser.Nav)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 724
                    self.navOptions()


                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 727
                self.match(SCSSParser.Device)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 728
                    self.deviceOptions()


                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 731
                self.match(SCSSParser.Drop)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 732
                    self.dropOptions()


                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 735
                self.match(SCSSParser.Fit)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 736
                    self.fitOptions()


                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 739
                self.match(SCSSParser.Outline)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 740
                    self.outlineOptions()


                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 743
                self.match(SCSSParser.Overflow)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 744
                    self.overflowOptions()


                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 747
                self.match(SCSSParser.Padding)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 748
                    self.paddingOptions()


                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 751
                self.match(SCSSParser.Page)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 752
                    self.pageOptions()


                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 755
                self.match(SCSSParser.Pause)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 756
                    self.pauseOptions()


                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 759
                self.match(SCSSParser.Rest)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 760
                    self.restOptions()


                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 763
                self.match(SCSSParser.Ruby)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 764
                    self.rubyOptions()


                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 767
                self.match(SCSSParser.Speak)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 768
                    self.speakOptions()


                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 771
                self.match(SCSSParser.Target)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 772
                    self.targetOptions()


                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 775
                self.match(SCSSParser.Transform)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 776
                    self.transformOptions()


                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 779
                self.match(SCSSParser.Transition)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 780
                    self.transitionOptions()


                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 783
                self.match(SCSSParser.Text)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 784
                    self.textOptions()


                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 787
                self.match(SCSSParser.Voice)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 788
                    self.voiceOptions()


                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 791
                self.match(SCSSParser.Word)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 792
                    self.wordOptions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BackgroundOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Attachment(self):
            return self.getToken(SCSSParser.Attachment, 0)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Image(self):
            return self.getToken(SCSSParser.Image, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def Repeat(self):
            return self.getToken(SCSSParser.Repeat, 0)

        def Clip(self):
            return self.getToken(SCSSParser.Clip, 0)

        def Origin(self):
            return self.getToken(SCSSParser.Origin, 0)

        def Size(self):
            return self.getToken(SCSSParser.Size, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_backgroundOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackgroundOptions" ):
                listener.enterBackgroundOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackgroundOptions" ):
                listener.exitBackgroundOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackgroundOptions" ):
                return visitor.visitBackgroundOptions(self)
            else:
                return visitor.visitChildren(self)




    def backgroundOptions(self):

        localctx = SCSSParser.BackgroundOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_backgroundOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(SCSSParser.Minus)
            self.state = 798
            _la = self._input.LA(1)
            if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 537134193) != 0) or _la==151):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Adjust(self):
            return self.getToken(SCSSParser.Adjust, 0)

        def Baseline(self):
            return self.getToken(SCSSParser.Baseline, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_alignmentOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentOptions" ):
                listener.enterAlignmentOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentOptions" ):
                listener.exitAlignmentOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentOptions" ):
                return visitor.visitAlignmentOptions(self)
            else:
                return visitor.visitChildren(self)




    def alignmentOptions(self):

        localctx = SCSSParser.AlignmentOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_alignmentOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(SCSSParser.Minus)
            self.state = 801
            _la = self._input.LA(1)
            if not(_la==117 or _la==147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnimationOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Delay(self):
            return self.getToken(SCSSParser.Delay, 0)

        def Direction(self):
            return self.getToken(SCSSParser.Direction, 0)

        def Duration(self):
            return self.getToken(SCSSParser.Duration, 0)

        def Name(self):
            return self.getToken(SCSSParser.Name, 0)

        def Iteration(self):
            return self.getToken(SCSSParser.Iteration, 0)

        def Count(self):
            return self.getToken(SCSSParser.Count, 0)

        def Play(self):
            return self.getToken(SCSSParser.Play, 0)

        def State(self):
            return self.getToken(SCSSParser.State, 0)

        def Timing(self):
            return self.getToken(SCSSParser.Timing, 0)

        def Function(self):
            return self.getToken(SCSSParser.Function, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_animationOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnimationOptions" ):
                listener.enterAnimationOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnimationOptions" ):
                listener.exitAnimationOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnimationOptions" ):
                return visitor.visitAnimationOptions(self)
            else:
                return visitor.visitChildren(self)




    def animationOptions(self):

        localctx = SCSSParser.AnimationOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_animationOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(SCSSParser.Minus)
            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                self.state = 804
                self.match(SCSSParser.Delay)
                pass
            elif token in [68]:
                self.state = 805
                self.match(SCSSParser.Direction)
                pass
            elif token in [149]:
                self.state = 806
                self.match(SCSSParser.Duration)
                pass
            elif token in [150]:
                self.state = 807
                self.match(SCSSParser.Name)
                pass
            elif token in [204]:
                self.state = 808
                self.match(SCSSParser.Iteration)
                self.state = 809
                self.match(SCSSParser.Minus)
                self.state = 810
                self.match(SCSSParser.Count)
                pass
            elif token in [85]:
                self.state = 811
                self.match(SCSSParser.Play)
                self.state = 812
                self.match(SCSSParser.Minus)
                self.state = 813
                self.match(SCSSParser.State)
                pass
            elif token in [205]:
                self.state = 814
                self.match(SCSSParser.Timing)
                self.state = 815
                self.match(SCSSParser.Minus)
                self.state = 816
                self.match(SCSSParser.Function)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BookmarkOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Label(self):
            return self.getToken(SCSSParser.Label, 0)

        def Level(self):
            return self.getToken(SCSSParser.Level, 0)

        def Target(self):
            return self.getToken(SCSSParser.Target, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_bookmarkOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBookmarkOptions" ):
                listener.enterBookmarkOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBookmarkOptions" ):
                listener.exitBookmarkOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBookmarkOptions" ):
                return visitor.visitBookmarkOptions(self)
            else:
                return visitor.visitChildren(self)




    def bookmarkOptions(self):

        localctx = SCSSParser.BookmarkOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_bookmarkOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(SCSSParser.Minus)
            self.state = 820
            _la = self._input.LA(1)
            if not(((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorderOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Collapse(self):
            return self.getToken(SCSSParser.Collapse, 0)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Spacing(self):
            return self.getToken(SCSSParser.Spacing, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def Radius(self):
            return self.getToken(SCSSParser.Radius, 0)

        def Top(self):
            return self.getToken(SCSSParser.Top, 0)

        def borderBottomTopOptions(self):
            return self.getTypedRuleContext(SCSSParser.BorderBottomTopOptionsContext,0)


        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def borderRightLeftOptions(self):
            return self.getTypedRuleContext(SCSSParser.BorderRightLeftOptionsContext,0)


        def Bottom(self):
            return self.getToken(SCSSParser.Bottom, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Image(self):
            return self.getToken(SCSSParser.Image, 0)

        def borderImageOptions(self):
            return self.getTypedRuleContext(SCSSParser.BorderImageOptionsContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_borderOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorderOptions" ):
                listener.enterBorderOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorderOptions" ):
                listener.exitBorderOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorderOptions" ):
                return visitor.visitBorderOptions(self)
            else:
                return visitor.visitChildren(self)




    def borderOptions(self):

        localctx = SCSSParser.BorderOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_borderOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(SCSSParser.Minus)
            self.state = 839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.state = 823
                self.match(SCSSParser.Collapse)
                pass
            elif token in [46]:
                self.state = 824
                self.match(SCSSParser.Color)
                pass
            elif token in [58]:
                self.state = 825
                self.match(SCSSParser.Spacing)
                pass
            elif token in [47]:
                self.state = 826
                self.match(SCSSParser.Style)
                pass
            elif token in [41]:
                self.state = 827
                self.match(SCSSParser.Width)
                pass
            elif token in [155]:
                self.state = 828
                self.match(SCSSParser.Radius)
                pass
            elif token in [43]:
                self.state = 829
                self.match(SCSSParser.Top)
                self.state = 830
                self.borderBottomTopOptions()
                pass
            elif token in [44]:
                self.state = 831
                self.match(SCSSParser.Right)
                self.state = 832
                self.borderRightLeftOptions()
                pass
            elif token in [45]:
                self.state = 833
                self.match(SCSSParser.Bottom)
                self.state = 834
                self.borderBottomTopOptions()
                pass
            elif token in [42]:
                self.state = 835
                self.match(SCSSParser.Left)
                self.state = 836
                self.borderRightLeftOptions()
                pass
            elif token in [51]:
                self.state = 837
                self.match(SCSSParser.Image)
                self.state = 838
                self.borderImageOptions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorderBottomTopOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Radius(self):
            return self.getToken(SCSSParser.Radius, 0)

        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_borderBottomTopOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorderBottomTopOptions" ):
                listener.enterBorderBottomTopOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorderBottomTopOptions" ):
                listener.exitBorderBottomTopOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorderBottomTopOptions" ):
                return visitor.visitBorderBottomTopOptions(self)
            else:
                return visitor.visitChildren(self)




    def borderBottomTopOptions(self):

        localctx = SCSSParser.BorderBottomTopOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_borderBottomTopOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(SCSSParser.Minus)
            self.state = 851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 842
                self.match(SCSSParser.Color)
                pass
            elif token in [47]:
                self.state = 843
                self.match(SCSSParser.Style)
                pass
            elif token in [41]:
                self.state = 844
                self.match(SCSSParser.Width)
                pass
            elif token in [42]:
                self.state = 845
                self.match(SCSSParser.Left)
                self.state = 846
                self.match(SCSSParser.Minus)
                self.state = 847
                self.match(SCSSParser.Radius)
                pass
            elif token in [44]:
                self.state = 848
                self.match(SCSSParser.Right)
                self.state = 849
                self.match(SCSSParser.Minus)
                self.state = 850
                self.match(SCSSParser.Radius)
                pass
            elif token in [10, 24]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorderRightLeftOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_borderRightLeftOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorderRightLeftOptions" ):
                listener.enterBorderRightLeftOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorderRightLeftOptions" ):
                listener.exitBorderRightLeftOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorderRightLeftOptions" ):
                return visitor.visitBorderRightLeftOptions(self)
            else:
                return visitor.visitChildren(self)




    def borderRightLeftOptions(self):

        localctx = SCSSParser.BorderRightLeftOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_borderRightLeftOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(SCSSParser.Minus)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 213305255788544) != 0):
                self.state = 854
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 213305255788544) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorderImageOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Outset(self):
            return self.getToken(SCSSParser.Outset, 0)

        def Repeat(self):
            return self.getToken(SCSSParser.Repeat, 0)

        def Slice(self):
            return self.getToken(SCSSParser.Slice, 0)

        def Source(self):
            return self.getToken(SCSSParser.Source, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_borderImageOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorderImageOptions" ):
                listener.enterBorderImageOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorderImageOptions" ):
                listener.exitBorderImageOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorderImageOptions" ):
                return visitor.visitBorderImageOptions(self)
            else:
                return visitor.visitChildren(self)




    def borderImageOptions(self):

        localctx = SCSSParser.BorderImageOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_borderImageOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(SCSSParser.Minus)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==56 or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 7) != 0):
                self.state = 858
                _la = self._input.LA(1)
                if not(_la==41 or _la==56 or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Align(self):
            return self.getToken(SCSSParser.Align, 0)

        def Decoration(self):
            return self.getToken(SCSSParser.Decoration, 0)

        def Break(self):
            return self.getToken(SCSSParser.Break, 0)

        def Direction(self):
            return self.getToken(SCSSParser.Direction, 0)

        def Flex(self):
            return self.getToken(SCSSParser.Flex, 0)

        def Lines(self):
            return self.getToken(SCSSParser.Lines, 0)

        def Ordinal(self):
            return self.getToken(SCSSParser.Ordinal, 0)

        def Group(self):
            return self.getToken(SCSSParser.Group, 0)

        def Orient(self):
            return self.getToken(SCSSParser.Orient, 0)

        def Pack(self):
            return self.getToken(SCSSParser.Pack, 0)

        def Shadow(self):
            return self.getToken(SCSSParser.Shadow, 0)

        def Sizing(self):
            return self.getToken(SCSSParser.Sizing, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_boxOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxOptions" ):
                listener.enterBoxOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxOptions" ):
                listener.exitBoxOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxOptions" ):
                return visitor.visitBoxOptions(self)
            else:
                return visitor.visitChildren(self)




    def boxOptions(self):

        localctx = SCSSParser.BoxOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_boxOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(SCSSParser.Minus)
            self.state = 880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.state = 862
                self.match(SCSSParser.Align)
                pass
            elif token in [98]:
                self.state = 863
                self.match(SCSSParser.Decoration)
                self.state = 864
                self.match(SCSSParser.Minus)
                self.state = 865
                self.match(SCSSParser.Break)
                pass
            elif token in [68]:
                self.state = 866
                self.match(SCSSParser.Direction)
                pass
            elif token in [156]:
                self.state = 867
                self.match(SCSSParser.Flex)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 868
                    self.match(SCSSParser.Minus)
                    self.state = 869
                    self.match(SCSSParser.Group)


                pass
            elif token in [157]:
                self.state = 872
                self.match(SCSSParser.Lines)
                pass
            elif token in [208]:
                self.state = 873
                self.match(SCSSParser.Ordinal)
                self.state = 874
                self.match(SCSSParser.Minus)
                self.state = 875
                self.match(SCSSParser.Group)
                pass
            elif token in [158]:
                self.state = 876
                self.match(SCSSParser.Orient)
                pass
            elif token in [159]:
                self.state = 877
                self.match(SCSSParser.Pack)
                pass
            elif token in [160]:
                self.state = 878
                self.match(SCSSParser.Shadow)
                pass
            elif token in [161]:
                self.state = 879
                self.match(SCSSParser.Sizing)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaptionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Side(self):
            return self.getToken(SCSSParser.Side, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_captionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaptionOptions" ):
                listener.enterCaptionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaptionOptions" ):
                listener.exitCaptionOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaptionOptions" ):
                return visitor.visitCaptionOptions(self)
            else:
                return visitor.visitChildren(self)




    def captionOptions(self):

        localctx = SCSSParser.CaptionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_captionOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(SCSSParser.Minus)

            self.state = 883
            self.match(SCSSParser.Side)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColorOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Profile(self):
            return self.getToken(SCSSParser.Profile, 0)

        def Index(self):
            return self.getToken(SCSSParser.Index, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_colorOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColorOptions" ):
                listener.enterColorOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColorOptions" ):
                listener.exitColorOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColorOptions" ):
                return visitor.visitColorOptions(self)
            else:
                return visitor.visitChildren(self)




    def colorOptions(self):

        localctx = SCSSParser.ColorOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_colorOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(SCSSParser.Minus)
            self.state = 886
            _la = self._input.LA(1)
            if not(_la==112 or _la==162):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Count(self):
            return self.getToken(SCSSParser.Count, 0)

        def Fill(self):
            return self.getToken(SCSSParser.Fill, 0)

        def Gap(self):
            return self.getToken(SCSSParser.Gap, 0)

        def columnRuleOptions(self):
            return self.getTypedRuleContext(SCSSParser.ColumnRuleOptionsContext,0)


        def Span(self):
            return self.getToken(SCSSParser.Span, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_columnOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnOptions" ):
                listener.enterColumnOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnOptions" ):
                listener.exitColumnOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnOptions" ):
                return visitor.visitColumnOptions(self)
            else:
                return visitor.visitChildren(self)




    def columnOptions(self):

        localctx = SCSSParser.ColumnOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(SCSSParser.Minus)
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 889
                self.match(SCSSParser.Count)
                pass
            elif token in [164]:
                self.state = 890
                self.match(SCSSParser.Fill)
                pass
            elif token in [165]:
                self.state = 891
                self.match(SCSSParser.Gap)
                pass
            elif token in [17]:
                self.state = 892
                self.columnRuleOptions()
                pass
            elif token in [167]:
                self.state = 893
                self.match(SCSSParser.Span)
                pass
            elif token in [41]:
                self.state = 894
                self.match(SCSSParser.Width)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRuleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_columnRuleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRuleOptions" ):
                listener.enterColumnRuleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRuleOptions" ):
                listener.exitColumnRuleOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnRuleOptions" ):
                return visitor.visitColumnRuleOptions(self)
            else:
                return visitor.visitChildren(self)




    def columnRuleOptions(self):

        localctx = SCSSParser.ColumnRuleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnRuleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(SCSSParser.Minus)
            self.state = 898
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 213305255788544) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CounterOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Increment(self):
            return self.getToken(SCSSParser.Increment, 0)

        def Reset(self):
            return self.getToken(SCSSParser.Reset, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_counterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCounterOptions" ):
                listener.enterCounterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCounterOptions" ):
                listener.exitCounterOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCounterOptions" ):
                return visitor.visitCounterOptions(self)
            else:
                return visitor.visitChildren(self)




    def counterOptions(self):

        localctx = SCSSParser.CounterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_counterOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(SCSSParser.Minus)
            self.state = 901
            _la = self._input.LA(1)
            if not(_la==62 or _la==65):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CueOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_cueOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCueOptions" ):
                listener.enterCueOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCueOptions" ):
                listener.exitCueOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCueOptions" ):
                return visitor.visitCueOptions(self)
            else:
                return visitor.visitChildren(self)




    def cueOptions(self):

        localctx = SCSSParser.CueOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_cueOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(SCSSParser.Minus)
            self.state = 904
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Family(self):
            return self.getToken(SCSSParser.Family, 0)

        def Size(self):
            return self.getToken(SCSSParser.Size, 0)

        def Skretch(self):
            return self.getToken(SCSSParser.Skretch, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Variant(self):
            return self.getToken(SCSSParser.Variant, 0)

        def Weight(self):
            return self.getToken(SCSSParser.Weight, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_fontOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontOptions" ):
                listener.enterFontOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontOptions" ):
                listener.exitFontOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontOptions" ):
                return visitor.visitFontOptions(self)
            else:
                return visitor.visitChildren(self)




    def fontOptions(self):

        localctx = SCSSParser.FontOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fontOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(SCSSParser.Minus)
            self.state = 907
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 3087007745) != 0) or _la==207):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Offset(self):
            return self.getToken(SCSSParser.Offset, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_floatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatOptions" ):
                listener.enterFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatOptions" ):
                listener.exitFloatOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatOptions" ):
                return visitor.visitFloatOptions(self)
            else:
                return visitor.visitChildren(self)




    def floatOptions(self):

        localctx = SCSSParser.FloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_floatOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(SCSSParser.Minus)

            self.state = 910
            self.match(SCSSParser.Offset)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GridOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Columns(self):
            return self.getToken(SCSSParser.Columns, 0)

        def Rows(self):
            return self.getToken(SCSSParser.Rows, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_gridOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGridOptions" ):
                listener.enterGridOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGridOptions" ):
                listener.exitGridOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGridOptions" ):
                return visitor.visitGridOptions(self)
            else:
                return visitor.visitChildren(self)




    def gridOptions(self):

        localctx = SCSSParser.GridOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gridOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(SCSSParser.Minus)
            self.state = 913
            _la = self._input.LA(1)
            if not(_la==121 or _la==170):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HyphenateOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def Character(self):
            return self.getToken(SCSSParser.Character, 0)

        def Lines(self):
            return self.getToken(SCSSParser.Lines, 0)

        def Resource(self):
            return self.getToken(SCSSParser.Resource, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_hyphenateOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHyphenateOptions" ):
                listener.enterHyphenateOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHyphenateOptions" ):
                listener.exitHyphenateOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHyphenateOptions" ):
                return visitor.visitHyphenateOptions(self)
            else:
                return visitor.visitChildren(self)




    def hyphenateOptions(self):

        localctx = SCSSParser.HyphenateOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_hyphenateOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(SCSSParser.Minus)
            self.state = 916
            _la = self._input.LA(1)
            if not(_la==53 or _la==54 or ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 49153) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImageOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Orientation(self):
            return self.getToken(SCSSParser.Orientation, 0)

        def Resolution(self):
            return self.getToken(SCSSParser.Resolution, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_imageOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageOptions" ):
                listener.enterImageOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageOptions" ):
                listener.exitImageOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImageOptions" ):
                return visitor.visitImageOptions(self)
            else:
                return visitor.visitChildren(self)




    def imageOptions(self):

        localctx = SCSSParser.ImageOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_imageOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(SCSSParser.Minus)
            self.state = 919
            _la = self._input.LA(1)
            if not(_la==5 or _la==173):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Image(self):
            return self.getToken(SCSSParser.Image, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def Type(self):
            return self.getToken(SCSSParser.Type, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_listOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOptions" ):
                listener.enterListOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOptions" ):
                listener.exitListOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOptions" ):
                return visitor.visitListOptions(self)
            else:
                return visitor.visitChildren(self)




    def listOptions(self):

        localctx = SCSSParser.ListOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_listOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(SCSSParser.Minus)

            self.state = 922
            self.match(SCSSParser.Style)
            self.state = 923
            self.match(SCSSParser.Minus)
            self.state = 924
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 1073741827) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarginOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Bottom(self):
            return self.getToken(SCSSParser.Bottom, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def Top(self):
            return self.getToken(SCSSParser.Top, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_marginOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarginOptions" ):
                listener.enterMarginOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarginOptions" ):
                listener.exitMarginOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarginOptions" ):
                return visitor.visitMarginOptions(self)
            else:
                return visitor.visitChildren(self)




    def marginOptions(self):

        localctx = SCSSParser.MarginOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_marginOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(SCSSParser.Minus)
            self.state = 927
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 65970697666560) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_markOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkOptions" ):
                listener.enterMarkOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkOptions" ):
                listener.exitMarkOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarkOptions" ):
                return visitor.visitMarkOptions(self)
            else:
                return visitor.visitChildren(self)




    def markOptions(self):

        localctx = SCSSParser.MarkOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_markOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(SCSSParser.Minus)
            self.state = 930
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarqueeOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Direction(self):
            return self.getToken(SCSSParser.Direction, 0)

        def Speed(self):
            return self.getToken(SCSSParser.Speed, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Play(self):
            return self.getToken(SCSSParser.Play, 0)

        def Count(self):
            return self.getToken(SCSSParser.Count, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_marqueeOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarqueeOptions" ):
                listener.enterMarqueeOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarqueeOptions" ):
                listener.exitMarqueeOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMarqueeOptions" ):
                return visitor.visitMarqueeOptions(self)
            else:
                return visitor.visitChildren(self)




    def marqueeOptions(self):

        localctx = SCSSParser.MarqueeOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_marqueeOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(SCSSParser.Minus)
            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 933
                self.match(SCSSParser.Direction)
                pass
            elif token in [175]:
                self.state = 934
                self.match(SCSSParser.Speed)
                pass
            elif token in [47]:
                self.state = 935
                self.match(SCSSParser.Style)
                pass
            elif token in [85]:
                self.state = 936
                self.match(SCSSParser.Play)
                self.state = 937
                self.match(SCSSParser.Minus)
                self.state = 938
                self.match(SCSSParser.Count)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Height(self):
            return self.getToken(SCSSParser.Height, 0)

        def Monochrome(self):
            return self.getToken(SCSSParser.Monochrome, 0)

        def Resolution(self):
            return self.getToken(SCSSParser.Resolution, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def Aspect(self):
            return self.getToken(SCSSParser.Aspect, 0)

        def Ratio(self):
            return self.getToken(SCSSParser.Ratio, 0)

        def Device(self):
            return self.getToken(SCSSParser.Device, 0)

        def minMaxDeviceOptions(self):
            return self.getTypedRuleContext(SCSSParser.MinMaxDeviceOptionsContext,0)


        def Index(self):
            return self.getToken(SCSSParser.Index, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_minMaxOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinMaxOptions" ):
                listener.enterMinMaxOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinMaxOptions" ):
                listener.exitMinMaxOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxOptions" ):
                return visitor.visitMinMaxOptions(self)
            else:
                return visitor.visitChildren(self)




    def minMaxOptions(self):

        localctx = SCSSParser.MinMaxOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_minMaxOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(SCSSParser.Minus)
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 942
                self.match(SCSSParser.Color)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 943
                    self.match(SCSSParser.Minus)
                    self.state = 944
                    self.match(SCSSParser.Index)


                pass
            elif token in [40]:
                self.state = 947
                self.match(SCSSParser.Height)
                pass
            elif token in [200]:
                self.state = 948
                self.match(SCSSParser.Monochrome)
                pass
            elif token in [5]:
                self.state = 949
                self.match(SCSSParser.Resolution)
                pass
            elif token in [41]:
                self.state = 950
                self.match(SCSSParser.Width)
                pass
            elif token in [203]:
                self.state = 951
                self.match(SCSSParser.Aspect)
                self.state = 952
                self.match(SCSSParser.Minus)
                self.state = 953
                self.match(SCSSParser.Ratio)
                pass
            elif token in [206]:
                self.state = 954
                self.match(SCSSParser.Device)
                self.state = 955
                self.minMaxDeviceOptions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxDeviceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Height(self):
            return self.getToken(SCSSParser.Height, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def Aspect(self):
            return self.getToken(SCSSParser.Aspect, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_minMaxDeviceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinMaxDeviceOptions" ):
                listener.enterMinMaxDeviceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinMaxDeviceOptions" ):
                listener.exitMinMaxDeviceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxDeviceOptions" ):
                return visitor.visitMinMaxDeviceOptions(self)
            else:
                return visitor.visitChildren(self)




    def minMaxDeviceOptions(self):

        localctx = SCSSParser.MinMaxDeviceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_minMaxDeviceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(SCSSParser.Minus)
            self.state = 959
            _la = self._input.LA(1)
            if not(_la==40 or _la==41 or _la==203):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NavOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Down(self):
            return self.getToken(SCSSParser.Down, 0)

        def Index(self):
            return self.getToken(SCSSParser.Index, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def Up(self):
            return self.getToken(SCSSParser.Up, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_navOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNavOptions" ):
                listener.enterNavOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNavOptions" ):
                listener.exitNavOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNavOptions" ):
                return visitor.visitNavOptions(self)
            else:
                return visitor.visitChildren(self)




    def navOptions(self):

        localctx = SCSSParser.NavOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_navOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(SCSSParser.Minus)
            self.state = 962
            _la = self._input.LA(1)
            if not(_la==42 or _la==44 or _la==112 or _la==176 or _la==177):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeviceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def Height(self):
            return self.getToken(SCSSParser.Height, 0)

        def Aspect(self):
            return self.getToken(SCSSParser.Aspect, 0)

        def Ratio(self):
            return self.getToken(SCSSParser.Ratio, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_deviceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeviceOptions" ):
                listener.enterDeviceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeviceOptions" ):
                listener.exitDeviceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeviceOptions" ):
                return visitor.visitDeviceOptions(self)
            else:
                return visitor.visitChildren(self)




    def deviceOptions(self):

        localctx = SCSSParser.DeviceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_deviceOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(SCSSParser.Minus)
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.state = 965
                self.match(SCSSParser.Width)
                pass
            elif token in [40]:
                self.state = 966
                self.match(SCSSParser.Height)
                pass
            elif token in [203]:
                self.state = 967
                self.match(SCSSParser.Aspect)
                self.state = 968
                self.match(SCSSParser.Minus)
                self.state = 969
                self.match(SCSSParser.Ratio)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Initial(self):
            return self.getToken(SCSSParser.Initial, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def dropOptionsBeforeAfter(self):
            return self.getTypedRuleContext(SCSSParser.DropOptionsBeforeAfterContext,0)


        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Size(self):
            return self.getToken(SCSSParser.Size, 0)

        def Value(self):
            return self.getToken(SCSSParser.Value, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_dropOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropOptions" ):
                listener.enterDropOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropOptions" ):
                listener.exitDropOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropOptions" ):
                return visitor.visitDropOptions(self)
            else:
                return visitor.visitChildren(self)




    def dropOptions(self):

        localctx = SCSSParser.DropOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dropOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(SCSSParser.Minus)
            self.state = 973
            self.match(SCSSParser.Initial)
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.state = 974
                self.match(SCSSParser.Before)
                self.state = 975
                self.dropOptionsBeforeAfter()
                pass
            elif token in [53]:
                self.state = 976
                self.match(SCSSParser.After)
                self.state = 977
                self.dropOptionsBeforeAfter()
                pass
            elif token in [75]:
                self.state = 978
                self.match(SCSSParser.Size)
                pass
            elif token in [197]:
                self.state = 979
                self.match(SCSSParser.Value)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropOptionsBeforeAfterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Adjust(self):
            return self.getToken(SCSSParser.Adjust, 0)

        def Align(self):
            return self.getToken(SCSSParser.Align, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_dropOptionsBeforeAfter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropOptionsBeforeAfter" ):
                listener.enterDropOptionsBeforeAfter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropOptionsBeforeAfter" ):
                listener.exitDropOptionsBeforeAfter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropOptionsBeforeAfter" ):
                return visitor.visitDropOptionsBeforeAfter(self)
            else:
                return visitor.visitChildren(self)




    def dropOptionsBeforeAfter(self):

        localctx = SCSSParser.DropOptionsBeforeAfterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dropOptionsBeforeAfter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(SCSSParser.Minus)
            self.state = 983
            _la = self._input.LA(1)
            if not(_la==97 or _la==147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FitOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_fitOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFitOptions" ):
                listener.enterFitOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFitOptions" ):
                listener.exitFitOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFitOptions" ):
                return visitor.visitFitOptions(self)
            else:
                return visitor.visitChildren(self)




    def fitOptions(self):

        localctx = SCSSParser.FitOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fitOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(SCSSParser.Minus)

            self.state = 986
            self.match(SCSSParser.Position)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutlineOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Color(self):
            return self.getToken(SCSSParser.Color, 0)

        def Offset(self):
            return self.getToken(SCSSParser.Offset, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def Width(self):
            return self.getToken(SCSSParser.Width, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_outlineOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutlineOptions" ):
                listener.enterOutlineOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutlineOptions" ):
                listener.exitOutlineOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutlineOptions" ):
                return visitor.visitOutlineOptions(self)
            else:
                return visitor.visitChildren(self)




    def outlineOptions(self):

        localctx = SCSSParser.OutlineOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_outlineOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(SCSSParser.Minus)
            self.state = 989
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 213305255788544) != 0) or _la==168):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverflowOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def X(self):
            return self.getToken(SCSSParser.X, 0)

        def Y(self):
            return self.getToken(SCSSParser.Y, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_overflowOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverflowOptions" ):
                listener.enterOverflowOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverflowOptions" ):
                listener.exitOverflowOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverflowOptions" ):
                return visitor.visitOverflowOptions(self)
            else:
                return visitor.visitChildren(self)




    def overflowOptions(self):

        localctx = SCSSParser.OverflowOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_overflowOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(SCSSParser.Minus)
            self.state = 992
            _la = self._input.LA(1)
            if not(_la==47 or _la==178 or _la==179):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaddingOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Left(self):
            return self.getToken(SCSSParser.Left, 0)

        def Top(self):
            return self.getToken(SCSSParser.Top, 0)

        def Right(self):
            return self.getToken(SCSSParser.Right, 0)

        def Bottom(self):
            return self.getToken(SCSSParser.Bottom, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_paddingOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPaddingOptions" ):
                listener.enterPaddingOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPaddingOptions" ):
                listener.exitPaddingOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPaddingOptions" ):
                return visitor.visitPaddingOptions(self)
            else:
                return visitor.visitChildren(self)




    def paddingOptions(self):

        localctx = SCSSParser.PaddingOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_paddingOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(SCSSParser.Minus)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 65970697666560) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Policy(self):
            return self.getToken(SCSSParser.Policy, 0)

        def pageBreakOptions(self):
            return self.getTypedRuleContext(SCSSParser.PageBreakOptionsContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_pageOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageOptions" ):
                listener.enterPageOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageOptions" ):
                listener.exitPageOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageOptions" ):
                return visitor.visitPageOptions(self)
            else:
                return visitor.visitChildren(self)




    def pageOptions(self):

        localctx = SCSSParser.PageOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pageOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(SCSSParser.Minus)
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.state = 998
                self.match(SCSSParser.Policy)
                pass
            elif token in [17]:
                self.state = 999
                self.pageBreakOptions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageBreakOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def Inside(self):
            return self.getToken(SCSSParser.Inside, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_pageBreakOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageBreakOptions" ):
                listener.enterPageBreakOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageBreakOptions" ):
                listener.exitPageBreakOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageBreakOptions" ):
                return visitor.visitPageBreakOptions(self)
            else:
                return visitor.visitChildren(self)




    def pageBreakOptions(self):

        localctx = SCSSParser.PageBreakOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pageBreakOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(SCSSParser.Minus)
            self.state = 1003
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 16777219) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PauseOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_pauseOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPauseOptions" ):
                listener.enterPauseOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPauseOptions" ):
                listener.exitPauseOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPauseOptions" ):
                return visitor.visitPauseOptions(self)
            else:
                return visitor.visitChildren(self)




    def pauseOptions(self):

        localctx = SCSSParser.PauseOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pauseOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(SCSSParser.Minus)
            self.state = 1006
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def After(self):
            return self.getToken(SCSSParser.After, 0)

        def Before(self):
            return self.getToken(SCSSParser.Before, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_restOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestOptions" ):
                listener.enterRestOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestOptions" ):
                listener.exitRestOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestOptions" ):
                return visitor.visitRestOptions(self)
            else:
                return visitor.visitChildren(self)




    def restOptions(self):

        localctx = SCSSParser.RestOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_restOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(SCSSParser.Minus)
            self.state = 1009
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RubyOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Align(self):
            return self.getToken(SCSSParser.Align, 0)

        def Overhang(self):
            return self.getToken(SCSSParser.Overhang, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def Span(self):
            return self.getToken(SCSSParser.Span, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_rubyOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRubyOptions" ):
                listener.enterRubyOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRubyOptions" ):
                listener.exitRubyOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRubyOptions" ):
                return visitor.visitRubyOptions(self)
            else:
                return visitor.visitChildren(self)




    def rubyOptions(self):

        localctx = SCSSParser.RubyOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_rubyOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SCSSParser.Minus)
            self.state = 1012
            _la = self._input.LA(1)
            if not(_la==52 or _la==97 or _la==167 or _la==184):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Header(self):
            return self.getToken(SCSSParser.Header, 0)

        def Numeral(self):
            return self.getToken(SCSSParser.Numeral, 0)

        def Punctuation(self):
            return self.getToken(SCSSParser.Punctuation, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_speakOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpeakOptions" ):
                listener.enterSpeakOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpeakOptions" ):
                listener.exitSpeakOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeakOptions" ):
                return visitor.visitSpeakOptions(self)
            else:
                return visitor.visitChildren(self)




    def speakOptions(self):

        localctx = SCSSParser.SpeakOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_speakOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(SCSSParser.Minus)
            self.state = 1015
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Name(self):
            return self.getToken(SCSSParser.Name, 0)

        def New(self):
            return self.getToken(SCSSParser.New, 0)

        def Position(self):
            return self.getToken(SCSSParser.Position, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_targetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetOptions" ):
                listener.enterTargetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetOptions" ):
                listener.exitTargetOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTargetOptions" ):
                return visitor.visitTargetOptions(self)
            else:
                return visitor.visitChildren(self)




    def targetOptions(self):

        localctx = SCSSParser.TargetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_targetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(SCSSParser.Minus)
            self.state = 1018
            _la = self._input.LA(1)
            if not(_la==52 or _la==150 or _la==186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Align(self):
            return self.getToken(SCSSParser.Align, 0)

        def Decoration(self):
            return self.getToken(SCSSParser.Decoration, 0)

        def Height(self):
            return self.getToken(SCSSParser.Height, 0)

        def Indent(self):
            return self.getToken(SCSSParser.Indent, 0)

        def Justify(self):
            return self.getToken(SCSSParser.Justify, 0)

        def Outline(self):
            return self.getToken(SCSSParser.Outline, 0)

        def Overflow(self):
            return self.getToken(SCSSParser.Overflow, 0)

        def Shadow(self):
            return self.getToken(SCSSParser.Shadow, 0)

        def Transform(self):
            return self.getToken(SCSSParser.Transform, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_textOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOptions" ):
                listener.enterTextOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOptions" ):
                listener.exitTextOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextOptions" ):
                return visitor.visitTextOptions(self)
            else:
                return visitor.visitChildren(self)




    def textOptions(self):

        localctx = SCSSParser.TextOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_textOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(SCSSParser.Minus)
            self.state = 1021
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 36029898678075392) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & -9223372036854775793) != 0) or _la==187):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Origin(self):
            return self.getToken(SCSSParser.Origin, 0)

        def Style(self):
            return self.getToken(SCSSParser.Style, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_transformOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformOptions" ):
                listener.enterTransformOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformOptions" ):
                listener.exitTransformOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformOptions" ):
                return visitor.visitTransformOptions(self)
            else:
                return visitor.visitChildren(self)




    def transformOptions(self):

        localctx = SCSSParser.TransformOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_transformOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(SCSSParser.Minus)
            self.state = 1024
            _la = self._input.LA(1)
            if not(_la==47 or _la==151):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SCSSParser.Minus)
            else:
                return self.getToken(SCSSParser.Minus, i)

        def Delay(self):
            return self.getToken(SCSSParser.Delay, 0)

        def Duration(self):
            return self.getToken(SCSSParser.Duration, 0)

        def Property(self):
            return self.getToken(SCSSParser.Property, 0)

        def Timing(self):
            return self.getToken(SCSSParser.Timing, 0)

        def Function(self):
            return self.getToken(SCSSParser.Function, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_transitionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionOptions" ):
                listener.enterTransitionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionOptions" ):
                listener.exitTransitionOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransitionOptions" ):
                return visitor.visitTransitionOptions(self)
            else:
                return visitor.visitChildren(self)




    def transitionOptions(self):

        localctx = SCSSParser.TransitionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_transitionOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(SCSSParser.Minus)
            self.state = 1033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                self.state = 1027
                self.match(SCSSParser.Delay)
                pass
            elif token in [149]:
                self.state = 1028
                self.match(SCSSParser.Duration)
                pass
            elif token in [189]:
                self.state = 1029
                self.match(SCSSParser.Property)
                pass
            elif token in [205]:
                self.state = 1030
                self.match(SCSSParser.Timing)
                self.state = 1031
                self.match(SCSSParser.Minus)
                self.state = 1032
                self.match(SCSSParser.Function)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VoiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Family(self):
            return self.getToken(SCSSParser.Family, 0)

        def Balance(self):
            return self.getToken(SCSSParser.Balance, 0)

        def Duration(self):
            return self.getToken(SCSSParser.Duration, 0)

        def Pitch(self):
            return self.getToken(SCSSParser.Pitch, 0)

        def Rate(self):
            return self.getToken(SCSSParser.Rate, 0)

        def Stress(self):
            return self.getToken(SCSSParser.Stress, 0)

        def Volume(self):
            return self.getToken(SCSSParser.Volume, 0)

        def voicePitchOptions(self):
            return self.getTypedRuleContext(SCSSParser.VoicePitchOptionsContext,0)


        def getRuleIndex(self):
            return SCSSParser.RULE_voiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoiceOptions" ):
                listener.enterVoiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoiceOptions" ):
                listener.exitVoiceOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoiceOptions" ):
                return visitor.visitVoiceOptions(self)
            else:
                return visitor.visitChildren(self)




    def voiceOptions(self):

        localctx = SCSSParser.VoiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_voiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(SCSSParser.Minus)
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 1036
                self.match(SCSSParser.Family)
                pass
            elif token in [190]:
                self.state = 1037
                self.match(SCSSParser.Balance)
                pass
            elif token in [149]:
                self.state = 1038
                self.match(SCSSParser.Duration)
                pass
            elif token in [82]:
                self.state = 1039
                self.match(SCSSParser.Pitch)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 1040
                    self.voicePitchOptions()


                pass
            elif token in [93]:
                self.state = 1043
                self.match(SCSSParser.Rate)
                pass
            elif token in [94]:
                self.state = 1044
                self.match(SCSSParser.Stress)
                pass
            elif token in [106]:
                self.state = 1045
                self.match(SCSSParser.Volume)
                pass
            elif token in [10, 24]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VoicePitchOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Range(self):
            return self.getToken(SCSSParser.Range, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_voicePitchOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoicePitchOptions" ):
                listener.enterVoicePitchOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoicePitchOptions" ):
                listener.exitVoicePitchOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoicePitchOptions" ):
                return visitor.visitVoicePitchOptions(self)
            else:
                return visitor.visitChildren(self)




    def voicePitchOptions(self):

        localctx = SCSSParser.VoicePitchOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_voicePitchOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(SCSSParser.Minus)
            self.state = 1049
            self.match(SCSSParser.Range)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WordOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minus(self):
            return self.getToken(SCSSParser.Minus, 0)

        def Spacing(self):
            return self.getToken(SCSSParser.Spacing, 0)

        def Break(self):
            return self.getToken(SCSSParser.Break, 0)

        def Wrap(self):
            return self.getToken(SCSSParser.Wrap, 0)

        def getRuleIndex(self):
            return SCSSParser.RULE_wordOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWordOptions" ):
                listener.enterWordOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWordOptions" ):
                listener.exitWordOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWordOptions" ):
                return visitor.visitWordOptions(self)
            else:
                return visitor.visitChildren(self)




    def wordOptions(self):

        localctx = SCSSParser.WordOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_wordOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(SCSSParser.Minus)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36 or _la==58 or _la==188:
                self.state = 1052
                _la = self._input.LA(1)
                if not(_la==36 or _la==58 or _la==188):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





